<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Symbol.Barcode</name>
    </assembly>
    <members>
        <member name="T:Symbol.Barcode.Actions">
            <summary>
            Performs actions on the Reader.
            </summary>
            <remarks>
            The Symbol.Barcode.Actions is used to perform actions on the scanner hardware.
            Such actions include starting and canceling pending reads, as well as, enabling
            and disabling the hardware. The class is normally contructed by the
             <see cref="T:Symbol.Barcode.Reader"/> class during its instantiation process. 
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.Actions.Finalize">
            <summary>
            Allows an Action object to attempt to free resources and perform other cleanup 
            operations before it is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Symbol.Barcode.Actions.Dispose">
            <summary>
            Release any resources used by the Actions class.
            </summary>
        </member>
        <member name="M:Symbol.Barcode.Actions.Enable">
            <summary>
            Enables the scanner hardware. This method does not make the scanner scan or 
            turn on the laser. 
            </summary>
            <remarks>
            The Enable() method may take a while to process due to that fact that 
            it instantiates the ScanParamsAPI, DecoderAPI, and UPCANParamsAPI, and
            Version objects. During this time the WaitCursor will be displayed on the
            screen. The Enable() method allows this initialization to be done when it
            least impacts the user experience (e.g. entry to a form). To perform the 
            scan of a barcode additional methods must be called. <seealso cref="M:Symbol.Barcode.Actions.Disable"/> 
            <seealso cref="M:Symbol.Barcode.Actions.Read(Symbol.Generic.ReaderData)"/> <seealso cref="M:Symbol.Barcode.Actions.ToggleSoftTrigger"/>
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.Actions.Disable">
            <summary>
            Disables the scanner hardware. Reverses the <see cref="M:Symbol.Barcode.Actions.Enable"/> process. The
            scanner must be re-enabled before its use if it has been disabled.
            <seealso cref="M:Symbol.Barcode.Actions.Enable"/>
            </summary> 
        </member>
        <member name="M:Symbol.Barcode.Actions.Read(Symbol.Generic.ReaderData)">
            <summary>
            Starts a pending read. The method will not turn on the
            laser. It will, however, put the scanner in a state in which the laser can
            be turned on either by pressing a hardware trigger or by performing a software
            trigger.
            </summary>
            <param name="rd">The ReaderData object that will contain the scanned data once
            the read completes.</param>
        </member>
        <member name="M:Symbol.Barcode.Actions.Flush">
            <summary>
            Removes all pending reads from the Reader. 
            </summary>
            <remarks>Calling Flush method is same as 
            calling <see cref="M:Symbol.Barcode.Actions.CancelRead(Symbol.Barcode.ReaderData)"/> method for all pending reads. 
            <seealso cref="M:Symbol.Barcode.Actions.Read(Symbol.Generic.ReaderData)"/> <seealso cref="M:Symbol.Barcode.Actions.CancelRead(Symbol.Barcode.ReaderData)"/></remarks>
        </member>
        <member name="M:Symbol.Barcode.Actions.CancelRead(Symbol.Barcode.ReaderData)">
            <summary>
            Removes a single pending read from the Reader. This method will only work
            if the given ReaderData object is still in a pending read situation (i.e. 
            the read has been submitted but no notification of a read completion or 
            failure has occurred).
            </summary>
            <param name="rd">A ReaderData object that has a pending read.</param>
        </member>
        <member name="M:Symbol.Barcode.Actions.ToggleSoftTrigger">
            <summary>
            Toggles the soft trigger of the scanner.
            </summary>
            <example>
            An application can use this method in the event handler for a software
            scan button press:
            <code>private void button1_Click(object sender, System.EventArgs e)
            {
            	ToggleSoftTrigger();
            }
            </code>
            </example>
        </member>
        <member name="M:Symbol.Barcode.Actions.NewReaderData">
            <summary>
            Creates a generic ReaderData object for use with a Symbol.Barcode.Reader 
            object. 
            </summary>
            <remarks>
            The Symbol.Generic base classes provide a level of abstraction for data providers
            such as Barcode Readers and Magnetic Stripe Readers. This abstraction provides 
            application developers with the capability to write generic code that can be
            used across different data providers and hardware. Since only common
            functionality is provided by the Generic classes, some specific features may
            be lost.
            </remarks>
            <returns>A generic ReaderData object.</returns>
        </member>
        <member name="M:Symbol.Barcode.Actions.SetParameters">
            <summary>
            All changes in decoder settings, reader settings, UPCEAN settings and Scanner settings
            will be applied to the barcode that will be read immediately.
            </summary>
            <remarks>If this function is not called after making modifications to any of these 
            parametsrs, then the changes would take effect only after the completion of any
            pending reads.</remarks>
        </member>
        <member name="M:Symbol.Barcode.Actions.GetParameters">
            <summary>
            Get decoder settings, reader settings, UPCEAN settings and Scanner settings from the
            underlying API.
            </summary>
        </member>
        <member name="M:Symbol.Barcode.Actions.StartStatusNotification">
            <summary>
            Start status notification thread
            </summary>
        </member>
        <member name="T:Symbol.Barcode.DecoderParamsAPI">
            <summary>
            The DecoderParamsAPI Class contains decoder parameters that are used by
            multiple decoder symbologies.
            </summary>
            <remarks>
            The DecoderParamsAPI class provides access to such decoder parameters
            as Enabled and IsSupported, among others. 
            This class is derived from Symbol.API and therefore can
            be used as with the StandardForms classes to create a UI interface for
            modifying/viewing the parameters.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.DecoderParamsAPI.Save(System.Boolean)">
            <summary>
            Saves the parameters so that they can be restored later.
            </summary>
            <param name="bRecurseIntoSubClasses">When "true", the save procedure
            will recurse into the subclasses and save their parameters as well. 
            (i.e. perform a deep copy).
            </param>
            <returns>
            An object that represents the saved parameters.
            </returns>
        </member>
        <member name="M:Symbol.Barcode.DecoderParamsAPI.Restore(System.Object)">
            <summary>
            Restores saved parameters. The object passed as a parameter should be
            obtained using the <see cref="M:Symbol.Barcode.DecoderParamsAPI.Save(System.Boolean)"/> method.
            </summary>
            <param name="SaveInfo">An object obtained that contains the saved state</param>
        </member>
        <member name="P:Symbol.Barcode.DecoderParamsAPI.Text">
            <summary>
            The Text property returns the name of the Decoder.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParamsAPI.IsSupported">
            <summary>
            Returns whether or not the Decoder is supported by the Reader.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParamsAPI.Enabled">
            <summary>
            Returns whether or not the Decoder is currently enabled.
            </summary>
            <value>
            Boolean flag that specifies state (true=enable,false=disable).
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderParamsAPI.MinimumLength">
            <summary>
            Returns the minimum length of a valid barcode for the decoder.
            </summary>
            <value>
            An integer, 0-55, representing the minimum size of the barcode.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderParamsAPI.MaximumLength">
            <summary>
            Returns the maximum length of a valid barcode for the decoder.
            </summary>
            <value>
            An integer, 0-55, representing the maximum size of the barcode.
            </value>
        </member>
        <member name="T:Symbol.Barcode.DecoderAPI">
            <summary>
            The DecoderAPI class provides access to decoder specific parameters.
            </summary>
            <remarks>
            This class is derived from Symbol.API and therefore can
            be used as with the StandardForms classes to create a UI interface for
            modifying/viewing the parameters.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.#ctor(Symbol.Barcode.Reader)">
            <summary>
            The DecoderAPI constructor is normally called by the Reader class during the
            Reader.Actions.Enable. The created object can be accessed using the 
            Reader.Decoders property. The constructor should not be called by the user.
            </summary>
            <param name="clsReader">A Reader object to obtain decoder information from.</param>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.Title(System.String)">
            <summary>
            The Title method takes a given string and appends " Parameters:" to it.
            It is used internally to generate title string for UI purposes.
            </summary>
            <param name="s">String object that contains first part of title.</param>
            <returns>String object that contains title for UI.</returns>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.IsEnabled(Symbol.Barcode.DecoderTypes)">
            <summary>
            Returns whether or not the given decoder is currently enabled.
            </summary>
            <param name="dt">A DecoderTypes enum that specifies a particular decoder.</param>
            <returns>A boolean flag which is true if enabled, false otherwise.</returns>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.SetEnabled(Symbol.Barcode.DecoderTypes,System.Boolean)">
            <summary>
            Sets whether or not a specified decoder should be enabled.
            </summary>
            <param name="dt">A DecoderTypes enum that specifies a particular decoder.</param>
            <param name="bValue">A boolean flag that is true if enabling a decoder, 
            false if disabling a decoder.</param>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.EnableAll">
            <summary>
            Enables all available decoders so that barcodes with those
            symbologies will be decoded by the scanner.
            </summary>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.DisableAll">
            <summary>
            Disables all available decoders so that barcodes with those
            symbologies will NOT be decoded by the scanner.
            </summary>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.EnableDefaults">
            <summary>
            Resets decoders to their default enabled state. This is the
            state of the scanner drivers when the hardware is reset.
            </summary>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.DisableDefaults">
            <summary>
            Disables all decoders that are enabled by default.
            </summary>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.Save(System.Boolean)">
            <summary>
            Saves the parameters so that they can be restored later if necessary.
            </summary>
            <param name="bRecurseIntoSubClasses">When "true", the save procedure
            will recurse into the subclasses and save their parameters as well. 
            (i.e. perform a deep copy).
            </param>
            <returns>
            An object that represents the saved parameters.
            </returns>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.Restore(System.Object)">
            <summary>
            Restores saved parameters. The object passed as
            a parameter should be obtained using the <see cref="M:Symbol.Barcode.DecoderAPI.Save(System.Boolean)"/> method.
            </summary>
            <param name="SaveInfo">An object obtained that contains the saved state</param>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.GetParameters">
            <summary>
            This function is not intended for the constructor.
            Get all decoder params from the underlying API
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.Text">
            <summary>
            Returns the text string ("Code Types") used to identify the object.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.ALL">
            <summary>
            Returns an dpALL object that provides access to decoder parameters for all
            decoders. With this object all decoders can be enabled or disabled.
            </summary>
            <value>
            A dpALL object containing decoder parameters for all decoders.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.DEFAULT">
            <summary>
            Returns a dpDEFAULT object that provides access to all decoders that 
            are enabled by default. The enabled and disabled state of these "default"
            decoders can be set through this object.
            </summary>
            <value>
            A dpDEFAULT object containing decoder parameters for all decoders that
            are enabled by default.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.UPCE0">
            <summary>
            Parameters for the this decoder can be viewed/modified using this object.
            </summary>
            <value>
            A dpUPCE0 object containing decoder parameters for the UPCE0 decoder.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.UPCE1">
            <summary>
            Parameters for the this decoder can be viewed/modified using this object.
            </summary>
            <value>
            A dpUPCE1 object containing decoder parameters for the UPCE1 decoder.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.UPCA">
            <summary>
            Parameters for the this decoder can be viewed/modified using this object.
            </summary>
            <value>
            A dpUPCEA object containing decoder parameters for the UPCEA decoder.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.MSI">
            <summary>
            Parameters for the this decoder can be viewed/modified using this object.
            </summary>
            <value>
            A dpMSI object containing decoder parameters for the MSI decoder.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.EAN8">
            <summary>
            Parameters for the this decoder can be viewed/modified using this object.
            </summary>
            <value>
            A dpEAN8 object containing decoder parameters for the EAN8 decoder.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.EAN13">
            <summary>
            Parameters for the this decoder can be viewed/modified using this object.
            </summary>
            <value>
            A dpEAN13 object containing decoder parameters for the EAN13 decoder.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.CODABAR">
            <summary>
            Parameters for the this decoder can be viewed/modified using this object.
            </summary>
            <value>
            A dpCODABAR object containing decoder parameters for the CODABAR decoder.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.CODE39">
            <summary>
            Parameters for the this decoder can be viewed/modified using this object.
            </summary>
            <value>
            A dpCODE39 object containing decoder parameters for the CODE39 decoder.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.D2OF5">
            <summary>
            Parameters for the this decoder can be viewed/modified using this object.
            </summary>
            <value>
            A dpD2OF5 object containing decoder parameters for the D2OF5 decoder.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.I2OF5">
            <summary>
            Parameters for the this decoder can be viewed/modified using this object.
            </summary>
            <value>
            A dpI2OF5 object containing decoder parameters for the I2OF5 decoder.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.CODE11">
            <summary>
            Parameters for the this decoder can be viewed/modified using this object.
            </summary>
            <value>
            A dpCODE11 object containing decoder parameters for the CODE11 decoder.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.CODE93">
            <summary>
            Parameters for the this decoder can be viewed/modified using this object.
            </summary>
            <value>
            A dpCODE93 object containing decoder parameters for the CODE93 decoder.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.CODE128">
            <summary>
            Parameters for the this decoder can be viewed/modified using this object.
            </summary>
            <value>
            A dpCODE128 object containing decoder parameters for the CODE128 decoder.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.PDF417">
            <summary>
            Parameters for the this decoder can be viewed/modified using this object.
            </summary>
            <value>
            A dpPDF417 object containing decoder parameters for the PDF417 decoder.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.TRIOPTIC39">
            <summary>
            Parameters for the this decoder can be viewed/modified using this object.
            </summary>
            <value>
            A dpTRIOPTIC39 object containing decoder parameters for the TRIOPTIC39
            decoder.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.MICROPDF">
            <summary>
            Parameters for the this decoder can be viewed/modified using this object.
            </summary>
            <value>
            A dpMICROPDF object containing decoder parameters for the MICROPDF decoder.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.MACROPDF">
            <summary>
            Parameters for the this decoder can be viewed/modified using this object.
            </summary>
            <value>
            A dpMACROPDF object containing decoder parameters for the MACROPDF decoder.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.MAXICODE">
            <summary>
            Parameters for the this decoder can be viewed/modified using this object.
            </summary>
            <value>
            A dpMAXICODE object containing decoder parameters for the MAXICODE decoder.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.DATAMATRIX">
            <summary>
            Parameters for the this decoder can be viewed/modified using this object.
            </summary>
            <value>
            A dpDATAMATRIX object containing decoder parameters for the DATAMATRIX decoder.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.QRCODE">
            <summary>
            Parameters for the this decoder can be viewed/modified using this object.
            </summary>
            <value>
            A dpQRCODE object containing decoder parameters for the QRCODE decoder.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.MACROMICROPDF">
            <summary>
            Parameters for the this decoder can be viewed/modified using this object.
            </summary>
            <value>
            A dpMACROMICROPDF object containing decoder parameters for the 
            MACROMICROPDF decoder.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.RSS14">
            <summary>
            Parameters for the this decoder can be viewed/modified using this object.
            </summary>
            <value>
            A dpRSS14 object containing decoder parameters for the RSS14 decoder.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.RSSLIM">
            <summary>
            Parameters for the this decoder can be viewed/modified using this object.
            </summary>
            <value>
            A dpRSSLIM object containing decoder parameters for the RSSLIM decoder.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.RSSEXP">
            <summary>
            Parameters for the this decoder can be viewed/modified using this object.
            </summary>
            <value>
            A dpRSSEXP object containing decoder parameters for the RSSEXP decoder.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.WEBCODE">
            <summary>
            Parameters for the this decoder can be viewed/modified using this object.
            </summary>
            <value>
            A dpWEBCODE object containing decoder parameters for the WEBCODE decoder.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.COMPOSITE_AB">
            <summary>
            Parameters for the this decoder can be viewed/modified using this object.
            </summary>
            <value>
            A dpCOMPOSITE_AB object containing decoder parameters for the COMPOSITE_AB decoder.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.COMPOSITE_C">
            <summary>
            Parameters for the this decoder can be viewed/modified using this object.
            </summary>
            <value>
            A dpCOMPOSITE_C object containing decoder parameters for the COMPOSITE_C decoder.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.TLC39">
            <summary>
            Parameters for the this decoder can be viewed/modified using this object.
            </summary>
            <value>
            A dpTLC39 object containing decoder parameters for the TLC39 decoder.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.USPOSTNET">
            <summary>
            Parameters for the this decoder can be viewed/modified using this object.
            </summary>
            <value>
            A dpUSPOSTNET object containing decoder parameters for the USPOSTNET decoder.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.USPLANET">
            <summary>
            Parameters for the this decoder can be viewed/modified using this object.
            </summary>
            <value>
            A dpUSPLANET object containing decoder parameters for the USPLANET decoder.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.UKPOSTAL">
            <summary>
            Parameters for the this decoder can be viewed/modified using this object.
            </summary>
            <value>
            A dpUKPOSTAL object containing decoder parameters for the UKPOSTAL decoder.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.JAPPOSTAL">
            <summary>
            Parameters for the this decoder can be viewed/modified using this object.
            </summary>
            <value>
            A dpJAPPOSTAL object containing decoder parameters for the JAPPOSTAL decoder.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.AUSPOSTAL">
            <summary>
            Parameters for the this decoder can be viewed/modified using this object.
            </summary>
            <value>
            A dpAUSPOSTAL object containing decoder parameters for the AUSPOSTAL decoder.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.DUTCHPOSTAL">
            <summary>
            Parameters for the this decoder can be viewed/modified using this object.
            </summary>
            <value>
            A dpDUTCHPOSTAL object containing decoder parameters for the DUTCHPOSTAL
            decoder.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.CANPOSTAL">
            <summary>
            Parameters for the this decoder can be viewed/modified using this object.
            </summary>
            <value>
            A dpCANPOSTAL object containing decoder parameters for the CANPOSTAL decoder.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.AZTEC">
            <summary>
            Parameters for the this decoder can be viewed/modified using this object.
            </summary>
            <value>
            A dpAZTEC object containing decoder parameters for the AZTEC decoder.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.MICROQR">
            <summary>
            Parameters for the this decoder can be viewed/modified using this object.
            </summary>
            <value>
            A dpMICROQR object containing decoder parameters for the MICROQR decoder.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.KOREAN_3OF5">
            <summary>
            Parameters for the this decoder can be viewed/modified using this object.
            </summary>
            <value>
            A dpKOREAN_3OF5 object containing decoder parameters for the KOREAN_3OF5 decoder.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.US4STATE">
            <summary>
            Parameters for the this decoder can be viewed/modified using this object.
            </summary>
            <value>
            A dpUS4STATE object containing decoder parameters for the US4STATE decoder.
            </value>
        </member>
        <member name="T:Symbol.Barcode.DecoderAPI.dpALL">
            <summary>
            The dpALL class provides access to parameters that are standard across
            all decoders. When these parameters are modified, all decoders are modified.
            </summary>
            <remarks> 
            The dpALL class is normally constructed by the DecoderParamsAPI class, which
            is constructed by the Reader. Therefore, access to these parameters should be
            made through the Reader.Decoders.ALL property.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.dpALL.#ctor(Symbol.Barcode.Reader)">
            <summary>
            The dpALL constructor should not normally be called. 
            </summary>
            <param name="clsReader">The Reader object in which decoder information 
            should come from.</param>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpALL.Enabled">
            <summary>
            The Enabled property when set to true enables all decoders, when false all 
            decoders are disabled.
            </summary>
            <value>
            Boolean flag that specifies state (true=enable,false=disable).
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpALL.MinimumLength">
            <summary>
            This property is not used. Returns 0 at all times.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpALL.MaximumLength">
            <summary>
            This property is not used. Returns 0 at all times.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.DecoderAPI.dpDEFAULT">
            <summary>
            The dpDEFAULT class provides access to parameters that are standard across
            all decoders that are enabled by default. When these parameters are modified,
            all of the default decoders are modified.
            </summary>
            <remarks> 
            The dpDEFAULT class is normally constructed by the DecoderParamsAPI class, which
            is constructed by the Reader. Therefore, access to these parameters should be
            made through the Reader.Decoders.DEFAULT property.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.dpDEFAULT.#ctor(Symbol.Barcode.Reader)">
            <summary>
            The dpDEFAULT constructor should not normally be called. 
            </summary>
            <param name="clsReader">The Reader object in which decoder information 
            should come from.</param>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpDEFAULT.Enabled">
            <summary>
            The Enabled property when set to true enables all decoders, when false all 
            decoders are disabled.
            </summary>
            <value>
            Boolean flag that specifies state (true=enable,false=disable).
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpDEFAULT.MinimumLength">
            <summary>
            This property is not used. Returns 0 at all times.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpDEFAULT.MaximumLength">
            <summary>
            This property is not used. Returns 0 at all times.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.DecoderAPI.dpUPCE0">
            <summary>
            The dpUPCE0 class provides access to parameters that are available for 
            the UPCE0 decoder.
            </summary>
            <remarks> 
            The dpUPCE0 class is normally constructed by the DecoderParamsAPI class, which
            is constructed by the Reader. Therefore, access to these parameters should be
            made through the Reader.Decoders.UPCE0 property.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.dpUPCE0.#ctor(Symbol.Barcode.Reader)">
            <summary>
            The dpUPCE0 constructor should not normally be called. 
            </summary>
            <param name="clsReader">The Reader object in which decoder information 
            should come from.</param>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpUPCE0.ReportCheckDigit">
            <summary>
            Flag to enable reporting the bar code check digit. 
            </summary>
            <value>
            A boolen flag that is true to enabled check digit reporting, false to
            disable check digit reporting.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpUPCE0.Preamble">
            <summary>
            Controls the preamble applied to the bar code. 
            </summary>
            <value>
            Refer to <see cref="T:Symbol.Barcode.UPC.Preambles"/> for
            possible preamble values.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpUPCE0.ConvertToUPCA">
            <summary>
            Flag to enable conversion from UPCE0 to UPCA bar code. If this flag
            is set, the bar code is converted to UPCA and UPCA parameters are used. 
            </summary>
            <value>
            A boolean flag that is true if conversion is on, false if conversion is
            off.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpUPCE0.MinimumLength">
            <summary>
            This property is not used. Returns 0 at all times.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpUPCE0.MaximumLength">
            <summary>
            This property is not used. Returns 0 at all times.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.DecoderAPI.dpUPCE1">
            <summary>
            The dpUPCE1 class provides access to parameters that are available for 
            the UPCE1 decoder.
            </summary>
            <remarks> 
            The dpUPCE1 class is normally constructed by the DecoderParamsAPI class, which
            is constructed by the Reader. Therefore, access to these parameters should be
            made through the Reader.Decoders.UPCE1 property.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.dpUPCE1.#ctor(Symbol.Barcode.Reader)">
            <summary>
            The dpUPCE1 constructor should not normally be called. 
            </summary>
            <param name="clsReader">The Reader object in which decoder information 
            should come from.
            </param>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpUPCE1.ReportCheckDigit">
            <summary>
            Flag to enable reporting the bar code check digit. 
            </summary>
            <value>
            A boolen flag that is true to enabled check digit reporting, false to
            disable check digit reporting.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpUPCE1.Preamble">
            <summary>
            Controls the preamble applied to the bar code. 
            </summary>
            <value>
            Refer to <see cref="T:Symbol.Barcode.UPC.Preambles"/> for
            possible preamble values.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpUPCE1.ConvertToUPCA">
            <summary>
            Flag to enable conversion from UPCE1 to UPCA bar code. If this flag
            is set, the bar code is converted to UPCA and UPCA parameters are used. 
            </summary>
            <value>
            A boolean flag that is true if conversion is on, false if conversion is
            off.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpUPCE1.MinimumLength">
            <summary>
            This property is not used. Returns 0 at all times.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpUPCE1.MaximumLength">
            <summary>
            This property is not used. Returns 0 at all times.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.DecoderAPI.dpUPCA">
            <summary>
            The dpUPCA class provides access to parameters that are available for 
            the UPCA decoder.
            </summary>
            <remarks> 
            The dpUPCA class is normally constructed by the DecoderParamsAPI class, which
            is constructed by the Reader. Therefore, access to these parameters should be
            made through the Reader.Decoders.UPCA property.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.dpUPCA.#ctor(Symbol.Barcode.Reader)">
            <summary>
            The dpUPCE1 constructor should not normally be called. 
            </summary>
            <param name="clsReader">The Reader object in which decoder information 
            should come from.</param>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpUPCA.ReportCheckDigit">
            <summary>
            Flag to enable reporting the bar code check digit. 
            </summary>
            <value>
            A boolen flag that is true to enabled check digit reporting, false to
            disable check digit reporting.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpUPCA.Preamble">
            <summary>
            Controls the preamble applied to the bar code. 
            </summary>
            <value>
            Refer to <see cref="T:Symbol.Barcode.UPC.Preambles"/> for
            possible preamble values.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpUPCA.MinimumLength">
            <summary>
            This property is not used. Returns 0 at all times.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpUPCA.MaximumLength">
            <summary>
            This property is not used. Returns 0 at all times.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.DecoderAPI.dpMSI">
            <summary>
            The dpMSI class provides access to parameters that are available for 
            the MSI decoder.
            </summary>
            <remarks> 
            The dpMSI class is normally constructed by the DecoderParamsAPI class, which
            is constructed by the Reader. Therefore, access to these parameters should be
            made through the Reader.Decoders.MSI property.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.dpMSI.#ctor(Symbol.Barcode.Reader)">
            <summary>
            The dpMSI constructor should not normally be called. 
            </summary>
            <param name="clsReader">The Reader object in which decoder information 
            should come from.</param>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpMSI.Redundancy">
            <summary>
            A flag the sets the redundancy.
            </summary>
            <value>
            A boolean flag that when true the bar code must be decoded twice
            before being accepted.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpMSI.CheckDigitCount">
            <summary>
            The number of check digits to be verified.
            </summary>
            <value>
            A <see cref="T:Symbol.Barcode.MSI.CheckDigitCounts"/> enumerated type member that 
            indicates the number of check digits.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpMSI.CheckDigitScheme">
            <summary>
            The check digit scheme to verify.
            </summary>
            <value>
            A <see cref="T:Symbol.Barcode.MSI.CheckDigitSchemes"/> enumerated type member that 
            indicates the check digit scheme.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpMSI.ReportCheckDigit">
            <summary>
            Flag to enable reporting the bar code check digit. 
            </summary>
            <value>
            A boolen flag that is true to enabled check digit reporting, false to
            disable check digit reporting.
            </value>
        </member>
        <member name="T:Symbol.Barcode.DecoderAPI.dpEAN8">
            <summary>
            The dpEAN8 class provides access to parameters that are available for 
            the EAN8 decoder.
            </summary>
            <remarks> 
            The dpEAN8 class is normally constructed by the DecoderParamsAPI class, which
            is constructed by the Reader. Therefore, access to these parameters should be
            made through the Reader.Decoders.EAN8 property.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.dpEAN8.#ctor(Symbol.Barcode.Reader)">
            <summary>
            The dpEAN8 constructor should not normally be called. 
            </summary>
            <param name="clsReader">The Reader object in which decoder information 
            should come from.</param>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpEAN8.ConvertToEAN13">
            <summary>
            Flag to enable conversion from EAN8 to EAN13 bar code.
            </summary>
            <value>
            A boolean flag that when set to true, the bar code is converted to EAN13
            and EAN13 parameters are used. 
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpEAN8.MinimumLength">
            <summary>
            This property is not used. Returns 0 at all times.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpEAN8.MaximumLength">
            <summary>
            This property is not used. Returns 0 at all times.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.DecoderAPI.dpEAN13">
            <summary>
            The dpEAN13 class provides access to parameters that are available for 
            the EAN13 decoder.
            </summary>
            <remarks> 
            The dpEAN13 class is normally constructed by the DecoderParamsAPI class, which
            is constructed by the Reader. Therefore, access to these parameters should be
            made through the Reader.Decoders.EAN13 property.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.dpEAN13.#ctor(Symbol.Barcode.Reader)">
            <summary>
            The dpEAN13 constructor should not normally be called. 
            </summary>
            <param name="clsReader">The Reader object in which decoder information 
            should come from.</param>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpEAN13.MinimumLength">
            <summary>
            This property is not used. Returns 0 at all times.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpEAN13.MaximumLength">
            <summary>
            This property is not used. Returns 0 at all times.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.DecoderAPI.dpCODABAR">
            <summary>
            The dpCODABAR class provides access to parameters that are available for 
            the CODABAR decoder.
            </summary>
            <remarks> 
            The dpCODABAR class is normally constructed by the DecoderParamsAPI class, which
            is constructed by the Reader. Therefore, access to these parameters should be
            made through the Reader.Decoders.CODABAR property.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.dpCODABAR.#ctor(Symbol.Barcode.Reader)">
            <summary>
            The dpCODABAR constructor should not normally be called. 
            </summary>
            <param name="clsReader">The Reader object in which decoder information 
            should come from.</param>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpCODABAR.Redundancy">
            <summary>
            Flag to enable redundancy.
            </summary>
            <value>
            A boolean flag that when set to true, the bar code must be decoded
            twice before being accepted. 
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpCODABAR.ClsiEditing">
            <summary>
            Flag to enable CLSI formatting.
            </summary>
            <value>
            A boolean flag that when set to true, CLSI formatting is turned on.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpCODABAR.NotisEditing">
            <summary>
            Flag to enable NOTIS formatting.
            </summary>
            <value>
            A boolean flag that when set to true, NOTIS formatting is turned on.
            </value>
        </member>
        <member name="T:Symbol.Barcode.DecoderAPI.dpCODE39">
            <summary>
            The dpCODE39 class provides access to parameters that are available for 
            the CODE39 decoder.
            </summary>
            <remarks> 
            The dpCODE39 class is normally constructed by the DecoderParamsAPI class, which
            is constructed by the Reader. Therefore, access to these parameters should be
            made through the Reader.Decoders.CODE39 property.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.dpCODE39.#ctor(Symbol.Barcode.Reader)">
            <summary>
            The dpCODE39 constructor should not normally be called. 
            </summary>
            <param name="clsReader">The Reader object in which decoder information 
            should come from.</param>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpCODE39.VerifyCheckDigit">
            <summary>
            Flag to enable verification of the bar code check digit. 
            </summary>
            <value>
            A boolean flag that when true enables the verification of the check
            digit.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpCODE39.ReportCheckDigit">
            <summary>
            Flag to enable reporting the bar code check digit. 
            </summary>
            <value>
            A boolen flag that is true to enabled check digit reporting, false to
            disable check digit reporting.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpCODE39.Concatenation">
            <summary>
            Flag to enable Code 39 barcode concatenation.
            </summary>
            <value>
            A boolean flag that when true enables Code 39 barcode concatenation.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpCODE39.FullAscii">
            <summary>
            Flag to enable full ASCII conversion of the bar code.
            </summary>
            <value>
            A boolean flag that when true enables the full ASCII conversion of
            the barcode.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpCODE39.Redundancy">
            <summary>
            Flag to enable redundancy.
            </summary>
            <value>
            A boolean flag that when set to true the barcode must be decoded
            twice before being accepted.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpCODE39.ConvertToCode32">
            <summary>
            Flag to enable conversion of Code 39 bar codes to Code 32.
            </summary>
            <value>
            A boolean flag that when set to true enables the conversion of the 
            Code 39 barcode to Code 32.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpCODE39.Code32Prefix">
            <summary>
            Flag to enable reporting the Code 32 prefix when a Code 39 bar code
            is converted.
            </summary>
            <value>
            A boolean flag that when true enables the reporting of Code 32 prefix
            when a Code 39 is converted.
            </value>
        </member>
        <member name="T:Symbol.Barcode.DecoderAPI.dpD2OF5">
            <summary>
            The dpD2OF5 class provides access to parameters that are available for 
            the D2OF5 decoder.
            </summary>
            <remarks> 
            The dpD2OF5 class is normally constructed by the DecoderParamsAPI class, which
            is constructed by the Reader. Therefore, access to these parameters should be
            made through the Reader.Decoders.D2OF5 property.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.dpD2OF5.#ctor(Symbol.Barcode.Reader)">
            <summary>
            The dpD2OF5 constructor should not normally be called. 
            </summary>
            <param name="clsReader">The Reader object in which decoder information 
            should come from.</param>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpD2OF5.Redundancy">
            <summary>
            Flag to enable redundancy.
            </summary>
            <value>
            A boolean flag that when set to true the barcode must be decoded
            twice before being accepted.
            </value>
        </member>
        <member name="T:Symbol.Barcode.DecoderAPI.dpI2OF5">
            <summary>
            The dpI2OF5 class provides access to parameters that are available for 
            the I2OF5 decoder.
            </summary>
            <remarks> 
            The dpI2OF5 class is normally constructed by the DecoderParamsAPI class, which
            is constructed by the Reader. Therefore, access to these parameters should be
            made through the Reader.Decoders.I2OF5 property.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.dpI2OF5.#ctor(Symbol.Barcode.Reader)">
            <summary>
            The dpI2OF5 constructor should not normally be called. 
            </summary>
            <param name="clsReader">The Reader object in which decoder information 
            should come from.</param>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpI2OF5.Redundancy">
            <summary>
            Flag to enable redundancy.
            </summary>
            <value>
            A boolean flag that when set to true the barcode must be decoded
            twice before being accepted.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpI2OF5.CheckDigitScheme">
            <summary>
            The check digit scheme to verify.
            </summary>
            <value>
            A <see cref="T:Symbol.Barcode.I2OF5.CheckDigitSchemes"/> enumerated type member that 
            indicates the check digit scheme.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpI2OF5.ReportCheckDigit">
            <summary>
            Flag to enable reporting the bar code check digit. 
            </summary>
            <value>
            A boolen flag that is true to enabled check digit reporting, false to
            disable check digit reporting.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpI2OF5.ConvertToEAN13">
            <summary>
            Flag to enable conversion from I2OF5 to EAN13 bar code. 
            </summary>
            <value>
            A boolean flag that when set to true, the bar code is converted to
            EAN13 and EAN13 parameters are used.
            </value>
        </member>
        <member name="T:Symbol.Barcode.DecoderAPI.dpCODE11">
            <summary>
            The dpCODE11 class provides access to parameters that are available for 
            the CODE11 decoder.
            </summary>
            <remarks> 
            The dpCODE11 class is normally constructed by the DecoderParamsAPI class, which	
            is constructed by the Reader. Therefore, access to these parameters should be
            made through the Reader.Decoders.CODE11 property.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.dpCODE11.#ctor(Symbol.Barcode.Reader)">
            <summary>
            The dpCODE11 constructor should not normally be called. 
            </summary>
            <param name="clsReader">The Reader object in which decoder information 
            should come from.</param>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpCODE11.Redundancy">
            <summary>
            Flag to enable redundancy.
            </summary>
            <value>
            A boolean flag that when set to true the barcode must be decoded
            twice before being accepted.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpCODE11.CheckDigitCount">
            <summary>
            The number of check digits to be verified.
            </summary>
            <value>
            A <see cref="T:Symbol.Barcode.CODE11.CheckDigitCounts"/> enumerated type member that 
            indicates the number of check digits.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpCODE11.ReportCheckDigit">
            <summary>
            Flag to enable reporting the bar code check digit. 
            </summary>
            <value>
            A boolen flag that is true to enabled check digit reporting, false to
            disable check digit reporting.
            </value>
        </member>
        <member name="T:Symbol.Barcode.DecoderAPI.dpCODE93">
            <summary>
            The dpCODE93 class provides access to parameters that are available for 
            the CODE93 decoder.
            </summary>
            <remarks> 
            The dpCODE93 class is normally constructed by the DecoderParamsAPI class, which	
            is constructed by the Reader. Therefore, access to these parameters should be
            made through the Reader.Decoders.CODE93 property.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.dpCODE93.#ctor(Symbol.Barcode.Reader)">
            <summary>
            The dpCODE93 constructor should not normally be called. 
            </summary>
            <param name="clsReader">The Reader object in which decoder information 
            should come from.</param>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpCODE93.Redundancy">
            <summary>
            Flag to enable redundancy.
            </summary>
            <value>
            A boolean flag that when set to true the barcode must be decoded
            twice before being accepted.
            </value>
        </member>
        <member name="T:Symbol.Barcode.DecoderAPI.dpCODE128">
            <summary>
            The dpCODE128 class provides access to parameters that are available for 
            the CODE128 decoder.
            </summary>
            <remarks> 
            The dpCODE128 class is normally constructed by the DecoderParamsAPI class, which	
            is constructed by the Reader. Therefore, access to these parameters should be
            made through the Reader.Decoders.CODE128 property.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.dpCODE128.#ctor(Symbol.Barcode.Reader)">
            <summary>
            The dpCODE128 constructor should not normally be called. 
            </summary>
            <param name="clsReader">The Reader object in which decoder information 
            should come from.</param>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpCODE128.Redundancy">
            <summary>
            Flag to enable redundancy.
            </summary>
            <value>
            A boolean flag that when set to true the barcode must be decoded
            twice before being accepted.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpCODE128.EAN128">
            <summary>
            Flag to enable EAN128 subtype. 
            </summary>
            <value>
            A boolean flag that when true enables the EAN128 subtype.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpCODE128.ISBT128">
            <summary>
            Flag to enable ISBT128 subtype. 
            </summary>
            <value>
            A boolean flag that when true enables the ISBT128 subtype.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpCODE128.Other128">
            <summary>
            Flag to enable other (non EAN or ISBT) 128 subtype. 
            </summary>
            <value>
            A boolean flag that when true enables the another (non EAN or ISBT) subtype.
            </value>
        </member>
        <member name="T:Symbol.Barcode.DecoderAPI.dpPDF417">
            <summary>
            The dpPDF417 class provides access to parameters that are available for 
            the PDF417 decoder.
            </summary>
            <remarks> 
            The dpPDF417 class is normally constructed by the DecoderParamsAPI class, which	
            is constructed by the Reader. Therefore, access to these parameters should be
            made through the Reader.Decoders.PDF417 property.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.dpPDF417.#ctor(Symbol.Barcode.Reader)">
            <summary>
            The dpPDF417 constructor should not normally be called. 
            </summary>
            <param name="clsReader">The Reader object in which decoder information 
            should come from.</param>
        </member>
        <member name="T:Symbol.Barcode.DecoderAPI.dpTRIOPTIC39">
            <summary>
            The dpTRIOPTIC39 class provides access to parameters that are available for 
            the TRIOPTIC39 decoder.
            </summary>
            <remarks> 
            The dpTRIOPTIC39 class is normally constructed by the DecoderParamsAPI class, which	
            is constructed by the Reader. Therefore, access to these parameters should be
            made through the Reader.Decoders.TRIOPTIC39 property.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.dpTRIOPTIC39.#ctor(Symbol.Barcode.Reader)">
            <summary>
            The dpTRIOPTIC39 constructor should not normally be called. 
            </summary>
            <param name="clsReader">The Reader object in which decoder information 
            should come from.</param>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpTRIOPTIC39.Redundancy">
            <summary>
            Flag to enable redundancy.
            </summary>
            <value>
            A boolean flag that when set to true the barcode must be decoded
            twice before being accepted.
            </value>
        </member>
        <member name="T:Symbol.Barcode.DecoderAPI.dpMICROPDF">
            <summary>
            The dpMICROPDF class provides access to parameters that are available for 
            the MICROPDF decoder.
            </summary>
            <remarks> 
            The dpMICROPDF class is normally constructed by the DecoderParamsAPI class, which	
            is constructed by the Reader. Therefore, access to these parameters should be
            made through the Reader.Decoders.MICROPDF property.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.dpMICROPDF.#ctor(Symbol.Barcode.Reader)">
            <summary>
            The dpMICROPDF constructor should not normally be called. 
            </summary>
            <param name="clsReader">The Reader object in which decoder information 
            should come from.</param>
        </member>
        <member name="T:Symbol.Barcode.DecoderAPI.dpMACROPDF">
            <summary>
            The dpMACROPDF class provides access to parameters that are available for 
            the MACROPDF decoder.
            </summary>
            <remarks> 
            The dpMACROPDF class is normally constructed by the DecoderParamsAPI class, which	
            is constructed by the Reader. Therefore, access to these parameters should be
            made through the Reader.Decoders.MACROPDF property.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.dpMACROPDF.#ctor(Symbol.Barcode.Reader)">
            <summary>
            The dpMACROPDF constructor should not normally be called. 
            </summary>
            <param name="clsReader">The Reader object in which decoder information 
            should come from.</param>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpMACROPDF.ReportAppendInfo">
            <summary>
            Flag to enable reporting of append information.
            </summary>
            <value>
            A boolean flag for reporting append information.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpMACROPDF.BufferLabels">
            <summary>
            Flag to enable buffering of labels.
            </summary>
            <value>
            A boolean flag for buffering labels.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpMACROPDF.ConvertToPDF417">
            <summary>
            Flag to enable conversion to PDF417 symbology.
            </summary>
            <value>
            A boolean flag for converting decode data to PDF417 symbology.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpMACROPDF.Exclusive">
            <summary>
            Flag to enable exclusive state.
            </summary>
            <value>
            A boolean flag for exclusive state.
            </value>
        </member>
        <member name="T:Symbol.Barcode.DecoderAPI.dpMAXICODE">
            <summary>
            The dpMAXICODE class provides access to parameters that are available for 
            the MAXICODE decoder.
            </summary>
            <remarks> 
            The dpMAXICODE class is normally constructed by the DecoderParamsAPI class, which	
            is constructed by the Reader. Therefore, access to these parameters should be
            made through the Reader.Decoders.MAXICODE property.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.dpMAXICODE.#ctor(Symbol.Barcode.Reader)">
            <summary>
            The dpMAXICODE constructor should not normally be called. 
            </summary>
            <param name="clsReader">The Reader object in which decoder information 
            should come from.</param>
        </member>
        <member name="T:Symbol.Barcode.DecoderAPI.dpDATAMATRIX">
            <summary>
            The dpDATAMATRIX class provides access to parameters that are available for 
            the DATAMATRIX decoder.
            </summary>
            <remarks> 
            The dpDATAMATRIX class is normally constructed by the DecoderParamsAPI class, which	
            is constructed by the Reader. Therefore, access to these parameters should be
            made through the Reader.Decoders.DATAMATRIX property.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.dpDATAMATRIX.#ctor(Symbol.Barcode.Reader)">
            <summary>
            The dpDATAMATRIX constructor should not normally be called. 
            </summary>
            <param name="clsReader">The Reader object in which decoder information 
            should come from.</param>
        </member>
        <member name="T:Symbol.Barcode.DecoderAPI.dpQRCODE">
            <summary>
            The dpQRCODE class provides access to parameters that are available for 
            the QRCODE decoder.
            </summary>
            <remarks> 
            The dpQRCODE class is normally constructed by the DecoderParamsAPI class, which	
            is constructed by the Reader. Therefore, access to these parameters should be
            made through the Reader.Decoders.QRCODE property.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.dpQRCODE.#ctor(Symbol.Barcode.Reader)">
            <summary>
            The dpQRCODE constructor should not normally be called. 
            </summary>
            <param name="clsReader">The Reader object in which decoder information 
            should come from.</param>
        </member>
        <member name="T:Symbol.Barcode.DecoderAPI.dpMACROMICROPDF">
            <summary>
            The dpMACROMICROPDF class provides access to parameters that are available for 
            the MACROMICRO decoder.
            </summary>
            <remarks> 
            The dpMACROMICROPDF class is normally constructed by the DecoderParamsAPI class, which	
            is constructed by the Reader. Therefore, access to these parameters should be
            made through the Reader.Decoders.MACROMICROPDF property.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.dpMACROMICROPDF.#ctor(Symbol.Barcode.Reader)">
            <summary>
            The dpMACROMICROPDF constructor should not normally be called. 
            </summary>
            <param name="clsReader">The Reader object in which decoder information 
            should come from.</param>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpMACROMICROPDF.ReportAppendInfo">
            <summary>
            Flag to enable reporting of append information.
            </summary>
            <value>
            A boolean flag for reporting append information.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpMACROMICROPDF.BufferLabels">
            <summary>
            Flag to enable buffering of labels.
            </summary>
            <value>
            A boolean flag for buffering labels.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpMACROMICROPDF.ConvertToPDF417">
            <summary>
            Flag to enable conversion to MICROPDF symbology.
            </summary>
            <value>
            A boolean flag for converting decode data to MICROPDF symbology.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpMACROMICROPDF.Exclusive">
            <summary>
            Flag to enable exclusive state.
            </summary>
            <value>
            A boolean flag for exclusive state.
            </value>
        </member>
        <member name="T:Symbol.Barcode.DecoderAPI.dpRSS14">
            <summary>
            The dpRSS14 class provides access to parameters that are available for 
            the RSS14 decoder.
            </summary>
            <remarks> 
            The dpRSS14 class is normally constructed by the DecoderParamsAPI class, which	
            is constructed by the Reader. Therefore, access to these parameters should be
            made through the Reader.Decoders.RSS14 property.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.dpRSS14.#ctor(Symbol.Barcode.Reader)">
            <summary>
            The dpRSS14 constructor should not normally be called. 
            </summary>
            <param name="clsReader">The Reader object in which decoder information 
            should come from.</param>
        </member>
        <member name="T:Symbol.Barcode.DecoderAPI.dpRSSLIM">
            <summary>
            The dpRSSLIM class provides access to parameters that are available for 
            the RSSLIM decoder.
            </summary>
            <remarks> 
            The dpRSSLIM class is normally constructed by the DecoderParamsAPI class, which	
            is constructed by the Reader. Therefore, access to these parameters should be
            made through the Reader.Decoders.RSSLIM property.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.dpRSSLIM.#ctor(Symbol.Barcode.Reader)">
            <summary>
            The dpRSSLIM constructor should not normally be called. 
            </summary>
            <param name="clsReader">The Reader object in which decoder information 
            should come from.</param>
        </member>
        <member name="T:Symbol.Barcode.DecoderAPI.dpRSSEXP">
            <summary>
            The dpRSSEXP class provides access to parameters that are available for 
            the RSSEXP decoder.
            </summary>
            <remarks> 
            The dpRSSEXP class is normally constructed by the DecoderParamsAPI class, which	
            is constructed by the Reader. Therefore, access to these parameters should be
            made through the Reader.Decoders.RSSEXP property.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.dpRSSEXP.#ctor(Symbol.Barcode.Reader)">
            <summary>
            The dpRSSEXP constructor should not normally be called. 
            </summary>
            <param name="clsReader">The Reader object in which decoder information 
            should come from.</param>
        </member>
        <member name="T:Symbol.Barcode.DecoderAPI.dpWEBCODE">
            <summary>
            The dpWEBCODE class provides access to parameters that are available for 
            the WEBCODE decoder.
            </summary>
            <remarks> 
            The dpWEBCODE class is normally constructed by the DecoderParamsAPI class, which	
            is constructed by the Reader. Therefore, access to these parameters should be
            made through the Reader.Decoders.WEBCODE property.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.dpWEBCODE.#ctor(Symbol.Barcode.Reader)">
            <summary>
            The dpWEBCODE constructor should not normally be called. 
            </summary>
            <param name="clsReader">The Reader object in which decoder information 
            should come from.</param>
        </member>
        <member name="T:Symbol.Barcode.DecoderAPI.dpCOMPOSITE_AB">
            <summary>
            The dpCOMPOSITE_AB class provides access to parameters that are available for 
            the COMPOSITE_AB decoder.
            </summary>
            <remarks> 
            The dpCOMPOSITE_AB class is normally constructed by the DecoderParamsAPI class, which	
            is constructed by the Reader. Therefore, access to these parameters should be
            made through the Reader.Decoders.COMPOSITE_AB property.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.dpCOMPOSITE_AB.#ctor(Symbol.Barcode.Reader)">
            <summary>
            The dpCOMPOSITE_AB constructor should not normally be called. 
            </summary>
            <param name="clsReader">The Reader object in which decoder information 
            should come from.</param>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpCOMPOSITE_AB.UCCLinkMode">
            <summary>
            The check digit scheme to verify.
            </summary>
            <value>
            A <see cref="T:Symbol.Barcode.COMPOSITE_AB.UCCLinkMode"/> enumerated type member that 
            indicates the check digit scheme.
            </value>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpCOMPOSITE_AB.MinimumLength">
            <summary>
            This property is not used. Returns 0 at all times.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpCOMPOSITE_AB.MaximumLength">
            <summary>
            This property is not used. Returns 0 at all times.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.DecoderAPI.dpCOMPOSITE_C">
            <summary>
            The dpCOMPOSITE_C class provides access to parameters that are available for 
            the COMPOSITE_C decoder.
            </summary>
            <remarks> 
            The dpCOMPOSITE_C class is normally constructed by the DecoderParamsAPI class, which	
            is constructed by the Reader. Therefore, access to these parameters should be
            made through the Reader.Decoders.COMPOSITE_C property.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.dpCOMPOSITE_C.#ctor(Symbol.Barcode.Reader)">
            <summary>
            The dpCOMPOSITE_C constructor should not normally be called. 
            </summary>
            <param name="clsReader">The Reader object in which decoder information 
            should come from.</param>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpCOMPOSITE_C.MinimumLength">
            <summary>
            This property is not used. Returns 0 at all times.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpCOMPOSITE_C.MaximumLength">
            <summary>
            This property is not used. Returns 0 at all times.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.DecoderAPI.dpTLC39">
            <summary>
            The dpTLC39 class provides access to parameters that are available for 
            the TLC39 decoder.
            </summary>
            <remarks> 
            The dpTLC39 class is normally constructed by the DecoderParamsAPI class, which	
            is constructed by the Reader. Therefore, access to these parameters should be
            made through the Reader.Decoders.TLC39 property.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.dpTLC39.#ctor(Symbol.Barcode.Reader)">
            <summary>
            The dpTLC39 constructor should not normally be called. 
            </summary>
            <param name="clsReader">The Reader object in which decoder information 
            should come from.</param>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpTLC39.MinimumLength">
            <summary>
            This property is not used. Returns 0 at all times.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpTLC39.MaximumLength">
            <summary>
            This property is not used. Returns 0 at all times.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.DecoderAPI.dpUSPOSTNET">
            <summary>
            The dpUSPOSTNET class provides access to parameters that are available for 
            the USPOSTNET decoder.
            </summary>
            <remarks> 
            The dpUSPOSTNET class is normally constructed by the DecoderParamsAPI class, which	
            is constructed by the Reader. Therefore, access to these parameters should be
            made through the Reader.Decoders.USPOSTNET property.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.dpUSPOSTNET.#ctor(Symbol.Barcode.Reader)">
            <summary>
            The dpUSPOSTNET constructor should not normally be called. 
            </summary>
            <param name="clsReader">The Reader object in which decoder information 
            should come from.</param>
        </member>
        <member name="T:Symbol.Barcode.DecoderAPI.dpUSPLANET">
            <summary>
            The dpUSPLANET class provides access to parameters that are available for 
            the USPLANET decoder.
            </summary>
            <remarks> 
            The dpUSPLANET class is normally constructed by the DecoderParamsAPI class, which	
            is constructed by the Reader. Therefore, access to these parameters should be
            made through the Reader.Decoders.USPLANET property.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.dpUSPLANET.#ctor(Symbol.Barcode.Reader)">
            <summary>
            The dpUSPLANET constructor should not normally be called. 
            </summary>
            <param name="clsReader">The Reader object in which decoder information 
            should come from.</param>
        </member>
        <member name="T:Symbol.Barcode.DecoderAPI.dpUKPOSTAL">
            <summary>
            The dpUKPOSTAL class provides access to parameters that are available for 
            the UKPOSTAL decoder.
            </summary>
            <remarks> 
            The dpUKPOSTAL class is normally constructed by the DecoderParamsAPI class, which	
            is constructed by the Reader. Therefore, access to these parameters should be
            made through the Reader.Decoders.UKPOSTAL property.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.dpUKPOSTAL.#ctor(Symbol.Barcode.Reader)">
            <summary>
            The dpUKPOSTAL constructor should not normally be called. 
            </summary>
            <param name="clsReader">The Reader object in which decoder information 
            should come from.</param>
        </member>
        <member name="T:Symbol.Barcode.DecoderAPI.dpJAPPOSTAL">
            <summary>
            The dpJAPPOSTAL class provides access to parameters that are available for 
            the JAPOSTAL decoder.
            </summary>
            <remarks> 
            The dpJAPPOSTAL class is normally constructed by the DecoderParamsAPI class, which	
            is constructed by the Reader. Therefore, access to these parameters should be
            made through the Reader.Decoders.JAPPOSTAL property.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.dpJAPPOSTAL.#ctor(Symbol.Barcode.Reader)">
            <summary>
            The dpJAPPOSTAL constructor should not normally be called. 
            </summary>
            <param name="clsReader">The Reader object in which decoder information 
            should come from.</param>
        </member>
        <member name="T:Symbol.Barcode.DecoderAPI.dpAUSPOSTAL">
            <summary>
            The dpAUSPOSTAL class provides access to parameters that are available for 
            the AUSPOSTAL decoder.
            </summary>
            <remarks> 
            The dpAUSPOSTAL class is normally constructed by the DecoderParamsAPI class, which	
            is constructed by the Reader. Therefore, access to these parameters should be
            made through the Reader.Decoders.AUSPOSTAL property.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.dpAUSPOSTAL.#ctor(Symbol.Barcode.Reader)">
            <summary>
            The dpAUSPOSTAL constructor should not normally be called. 
            </summary>
            <param name="clsReader">The Reader object in which decoder information 
            should come from.</param>
        </member>
        <member name="T:Symbol.Barcode.DecoderAPI.dpDUTCHPOSTAL">
            <summary>
            The dpDUTCHPOSTAL class provides access to parameters that are available for 
            the DUTCHPOSTAL decoder.
            </summary>
            <remarks> 
            The dpDUTCHPOSTAL class is normally constructed by the DecoderParamsAPI class, which	
            is constructed by the Reader. Therefore, access to these parameters should be
            made through the Reader.Decoders.DUTCHPOSTAL property.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.dpDUTCHPOSTAL.#ctor(Symbol.Barcode.Reader)">
            <summary>
            The dpDUTCHPOSTAL constructor should not normally be called. 
            </summary>
            <param name="clsReader">The Reader object in which decoder information 
            should come from.</param>
        </member>
        <member name="T:Symbol.Barcode.DecoderAPI.dpCANPOSTAL">
            <summary>
            The dpCANPOSTAL class provides access to parameters that are available for 
            the CANPOSTAL decoder.
            </summary>
            <remarks> 
            The dpCANPOSTAL class is normally constructed by the DecoderParamsAPI class, which	
            is constructed by the Reader. Therefore, access to these parameters should be
            made through the Reader.Decoders.CANPOSTAL property.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.dpCANPOSTAL.#ctor(Symbol.Barcode.Reader)">
            <summary>
            The dpCANPOSTAL constructor should not normally be called. 
            </summary>
            <param name="clsReader">The Reader object in which decoder information 
            should come from.</param>
        </member>
        <member name="T:Symbol.Barcode.DecoderAPI.dpAZTEC">
            <summary>
            The dpAZTEC class provides access to parameters that are available for 
            the AZTEC decoder.
            </summary>
            <remarks> 
            The dpAZTEC class is normally constructed by the DecoderParamsAPI class, which	
            is constructed by the Reader. Therefore, access to these parameters should be
            made through the Reader.Decoders.AZTEC property.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.dpAZTEC.#ctor(Symbol.Barcode.Reader)">
            <summary>
            The dpAZTEC constructor should not normally be called. 
            </summary>
            <param name="clsReader">The Reader object in which decoder information 
            should come from.</param>
        </member>
        <member name="T:Symbol.Barcode.DecoderAPI.dpMICROQR">
            <summary>
            The dpMICROQR class provides access to parameters that are available for 
            the MICROQR decoder.
            </summary>
            <remarks> 
            The dpMICROQR class is normally constructed by the DecoderParamsAPI class, which	
            is constructed by the Reader. Therefore, access to these parameters should be
            made through the Reader.Decoders.MICROQR property.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.dpMICROQR.#ctor(Symbol.Barcode.Reader)">
            <summary>
            The dpMICROQR constructor should not normally be called. 
            </summary>
            <param name="clsReader">The Reader object in which decoder information 
            should come from.</param>
        </member>
        <member name="T:Symbol.Barcode.DecoderAPI.dpKOREAN_3OF5">
            <summary>
            The dpKOREAN_3OF5 class provides access to parameters that are available for 
            the KOREAN_3OF5 decoder.
            </summary>
            <remarks> 
            The dpKOREAN_3OF5 class is normally constructed by the DecoderParamsAPI class, which	
            is constructed by the Reader. Therefore, access to these parameters should be
            made through the Reader.Decoders.KOREAN_3OF5 property.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.dpKOREAN_3OF5.#ctor(Symbol.Barcode.Reader)">
            <summary>
            The dpKOREAN_3OF5 constructor should not normally be called. 
            </summary>
            <param name="clsReader">The Reader object in which decoder information 
            should come from.</param>
        </member>
        <member name="P:Symbol.Barcode.DecoderAPI.dpKOREAN_3OF5.Redundancy">
            <summary>
            A flag the sets the redundancy.
            </summary>
            <value>
            A boolean flag that when true the bar code must be decoded twice
            before being accepted.
            </value>
            <remarks>This flag is only considered if 
            LASER_SPECIFIC.dwLinearSecurityLevel = SECURITY_REDUNDANCY_AND_LENGTH ( = 0 ).</remarks>
        </member>
        <member name="T:Symbol.Barcode.DecoderAPI.dpUS4STATE">
            <summary>
            The dpUS4STATE class provides access to parameters that are available for 
            the US4STATE decoder.
            </summary>
            <remarks> 
            The dpUS4STATE class is normally constructed by the DecoderParamsAPI class, which	
            is constructed by the Reader. Therefore, access to these parameters should be
            made through the Reader.Decoders.US4STATE property.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.DecoderAPI.dpUS4STATE.#ctor(Symbol.Barcode.Reader)">
            <summary>
            The dpUS4STATE constructor should not normally be called. 
            </summary>
            <param name="clsReader">The Reader object in which decoder information 
            should come from.</param>
        </member>
        <member name="T:Symbol.Barcode.UPCEANParamsAPI">
            <summary>
            The UPCEANParamsAPI class provides access to parameters that are available for 
            the UPC and EAN decoders.
            </summary>
            <remarks> 
            The UPCEANParamsAPI class is normally constructed by the Reader class and can be
            accessed through the Reader.UPCEANParams property. This class is derived from
            Symbol.API and can be used as with the StandardForms classes to create a UI
            interface for modifying/viewing the parameters.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.UPCEANParamsAPI.#ctor(Symbol.Barcode.Reader)">
            <summary>
            The UPCEANParamsAPI constructor should not normally be called. 
            </summary>
            <param name="clsReader">The Reader object from which decoder information 
            should come from.</param>
        </member>
        <member name="M:Symbol.Barcode.UPCEANParamsAPI.Save(System.Boolean)">
            <summary>
            Saves the parameters so that they can be restored later.
            </summary>
            <param name="bRecurseIntoSubClasses">When "true", the save procedure
            will recurse into the subclasses and save their parameters as well. 
            (i.e. perform a deep copy).
            </param>
            <returns>
            An object that represents the saved parameters.
            </returns>
        </member>
        <member name="M:Symbol.Barcode.UPCEANParamsAPI.Restore(System.Object)">
            <summary>
            Restores saved parameters. The object passed as
            a parameter should be obtained using the <see cref="M:Symbol.Barcode.UPCEANParamsAPI.Save(System.Boolean)"/> method.
            </summary>
            <param name="SaveInfo">An object obtained that contains the saved state</param>
        </member>
        <member name="P:Symbol.Barcode.UPCEANParamsAPI.Text">
            <summary>
            The Text property returns a friendly class name.
            </summary>
            <value>
            String returns "UPCEAN General".
            </value>
        </member>
        <member name="P:Symbol.Barcode.UPCEANParamsAPI.SecurityLevel">
            <summary>
            The UPC/EAN security level.
            </summary>
            <value>
            A <see cref="T:Symbol.Barcode.UPCEAN.SecurityLevels"/> member that indicates the type of 
            security.
            </value>
        </member>
        <member name="P:Symbol.Barcode.UPCEANParamsAPI.Supplemental2">
            <summary>
            Flag to enable length 2 supplementals. 
            </summary>
            <value>
            A <see cref="T:Symbol.Barcode.DisabledEnabled"/> member that indicates whether or not length
            2 supplementals are enabled.
            </value>
        </member>
        <member name="P:Symbol.Barcode.UPCEANParamsAPI.Supplemental5">
            <summary>
            Flag to enable length 5 supplementals. 
            </summary>
            <value>
            A <see cref="T:Symbol.Barcode.DisabledEnabled"/> member that indicates whether or not length
            5 supplementals are enabled.
            </value>
        </member>
        <member name="P:Symbol.Barcode.UPCEANParamsAPI.SupplementalMode">
            <summary>
            The supplemental mode. 
            </summary>
            <value>
            A <see cref="T:Symbol.Barcode.UPCEAN.SupplementalModes"/> member that indicates the current
            supplemental mode.
            </value>
        </member>
        <member name="P:Symbol.Barcode.UPCEANParamsAPI.SupplementalRetries">
            <summary>
            Retry count for auto-discriminating for supplementals. Note that this flag is 
            only considered if the <see cref="P:Symbol.Barcode.UPCEANParamsAPI.SupplementalMode"/> has been set to Auto.
            </summary>
            <value>
            The number of retries. An integer type that can be 2 to 10 inclusive.
            </value>
        </member>
        <member name="P:Symbol.Barcode.UPCEANParamsAPI.RandomWeightCheckDigit">
            <summary>
            Flag to enable random weight check digit verification. 
            </summary>
            <value>
            A <see cref="T:Symbol.Barcode.DisabledEnabled"/> member that indicates whether or not random weight
            check digit verification is on.
            </value>
        </member>
        <member name="P:Symbol.Barcode.UPCEANParamsAPI.LinearDecode">
            <summary>
            Flag to enable linear decode.
            </summary>
            <value>
            A <see cref="T:Symbol.Barcode.DisabledEnabled"/> member that indicates whether or not linear 
            decode has been enabled.
            </value>
        </member>
        <member name="P:Symbol.Barcode.UPCEANParamsAPI.BooklandCode">
            <summary>
            Flag to enable Bookland code decoding.
            </summary>
            <value>
            A <see cref="T:Symbol.Barcode.DisabledEnabled"/> member that indicates whether or not Bookland 
            decoding has been enabled.
            </value>
        </member>
        <member name="P:Symbol.Barcode.UPCEANParamsAPI.CouponCode">
            <summary>
            Flag to enable Coupon Code decoding.
            </summary>
            <value>
            A <see cref="T:Symbol.Barcode.DisabledEnabled"/> member that indicates whether or not Coupon Code
            decoding has been enabled.
            </value>
        </member>
        <member name="T:Symbol.Barcode.ScanParamsAPI">
            <summary>
            The ScanParamsAPI class provides access to scanning parameters that are available for 
            all decoders.
            </summary>
            <remarks> 
            The ScanParamsAPI class is normally constructed by the Reader class and can be
            accessed through the Reader.Parameters property. This class is derived from
            Symbol.API and can be used as with the StandardForms classes to create a UI
            interface for modifying/viewing the parameters.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.ScanParamsAPI.#ctor(Symbol.Barcode.Reader)">
            <summary>
            The ScanParamsAPI constructor should not normally be called. 
            </summary>
            <param name="r">The Reader object from which decoder information 
            should come from.</param>
        </member>
        <member name="M:Symbol.Barcode.ScanParamsAPI.Save(System.Boolean)">
            <summary>
            Saves the parameters so that they can be restored later.
            </summary>
            <param name="bRecurseIntoSubClasses">When "true", the save procedure
            will recurse into the subclasses and save their parameters as well. 
            (i.e. perform a deep copy).
            </param>
            <returns>
            An object that represents the saved parameters.
            </returns>
        </member>
        <member name="M:Symbol.Barcode.ScanParamsAPI.Restore(System.Object)">
            <summary>
            Restores saved parameters. The object passed as
            a parameter should be obtained using the <see cref="M:Symbol.Barcode.ScanParamsAPI.Save(System.Boolean)"/> method.
            </summary>
            <param name="SaveInfo">An object obtained that contains the saved state</param>
        </member>
        <member name="P:Symbol.Barcode.ScanParamsAPI.Text">
            <summary>
            A Text property that returns a friendly name for the class.
            </summary>
            <value>
            String that returns "Parameters".
            </value>
        </member>
        <member name="P:Symbol.Barcode.ScanParamsAPI.CodeIdType">
            <summary>
            The type of Code ID to be reported.
            </summary>
            <value>
            A <see cref="T:Symbol.Barcode.CodeIdTypes"/> member that sets the Code ID prefix to be reported.
            </value>
        </member>
        <member name="P:Symbol.Barcode.ScanParamsAPI.ScanType">
            <summary>
            The type of scan request. 
            </summary>
            <value>
            A <see cref="T:Symbol.Barcode.ScanTypes"/> member that indicates the type of scan to perform.
            </value>
        </member>
        <member name="P:Symbol.Barcode.ScanParamsAPI.LocalFeedback">
            <summary>
            Flag to enable local feedback.  
            </summary>
            <value>
            A <see cref="T:Symbol.Barcode.DisabledEnabled"/> member. When set to disabled, feedback is
            only done on the scanner device. Otherwise, feedback will be provided locally
            (e.g. at the Reader).
            </value>
        </member>
        <member name="P:Symbol.Barcode.ScanParamsAPI.Feedback">
            <summary>
            The Feedback property provides access to a LIST that contains the different
            types of notification events available when scanning. This list includes Success,
            Start, Proceed, Fail, among others.
            </summary>
            <value>
            Returns a <see cref="T:Symbol.Barcode.ScanParamsAPI.FeedbackListPropertyInfo"/> object. This object provides a
            list of feedback types that can be modified.
            </value>
        </member>
        <member name="T:Symbol.Barcode.ScanParamsAPI.FeedbackListPropertyInfo">
            <summary>
            The FeedbackListPropertyInfo class provides access to a LIST of feedback
            types. Each feedback type will contain a separate set of parameters which can 
            be modified to suit the needs of the scanning environment.
            </summary>
            <remarks> 
            The FeedbackListPropertyInfo class is normally constructed by the ScanParamsAPI
            class and can be accessed through the Reader.Parameters.Feedback property. This
            class is derived from Symbol.API and can be used as with the StandardForms
            classes to create a UI interface for modifying/viewing the parameters.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.ScanParamsAPI.FeedbackListPropertyInfo.#ctor(Symbol.Barcode.ScanParamsAPI)">
            <summary>
            The FeedbackListPropertyInfo constructor should not normally be called. 
            </summary>
            <param name="parent">The ScanParamsAPI object from which parameter information 
            should come from.</param>
        </member>
        <member name="M:Symbol.Barcode.ScanParamsAPI.FeedbackListPropertyInfo.Save(System.Boolean)">
            <summary>
            This class does not allow for the saving and restoring of state
            information.
            </summary>
            <param name="bRecurseIntoSubClasses">This parameter is not used.</param>
            <returns>This function simply returns a null.</returns>
        </member>
        <member name="M:Symbol.Barcode.ScanParamsAPI.FeedbackListPropertyInfo.Restore(System.Object)">
            <summary>
            This class does not allow for the saving and restoring of state
            information. Therefore, this method does nothing.
            </summary>
            <param name="SaveInfo">This parameter is not used.</param>
        </member>
        <member name="P:Symbol.Barcode.ScanParamsAPI.FeedbackListPropertyInfo.Text">
            <summary>
            A Text string that contains the Friendly name for this class.
            </summary>
            <value>
            String that returns "Feedback".
            </value>
        </member>
        <member name="P:Symbol.Barcode.ScanParamsAPI.FeedbackListPropertyInfo.Success">
            <summary>
            The Success property provides access to feedback parameters that can be set
            upon a successful decode. 
            </summary>
            <value>
            A <see cref="T:Symbol.Barcode.ScanParamsAPI.FeedbackPropertyInfo"/> object will be returned. This object can
            be used to set parameters about the feedback.
            </value>
        </member>
        <member name="P:Symbol.Barcode.ScanParamsAPI.FeedbackListPropertyInfo.Start">
            <summary>
            The Start property provides access to feedback parameters that can be set
            upon a start event. 
            </summary>
            <value>
            A <see cref="T:Symbol.Barcode.ScanParamsAPI.FeedbackPropertyInfo"/> object will be returned. This object can
            be used to set parameters about the feedback.
            </value>
        </member>
        <member name="P:Symbol.Barcode.ScanParamsAPI.FeedbackListPropertyInfo.Proceed">
            <summary>
            The Proceed property provides access to feedback parameters that can be set
            upon an intermediate event. 
            </summary>
            <value>
            A <see cref="T:Symbol.Barcode.ScanParamsAPI.FeedbackPropertyInfo"/> object will be returned. This object can
            be used to set parameters about the feedback.
            </value>
        </member>
        <member name="P:Symbol.Barcode.ScanParamsAPI.FeedbackListPropertyInfo.Fail">
            <summary>
            The Fail property provides access to feedback parameters that can be set
            upon a fatal error event. 
            </summary>
            <value>
            A <see cref="T:Symbol.Barcode.ScanParamsAPI.FeedbackPropertyInfo"/> object will be returned. This object can
            be used to set parameters about the feedback.
            </value>
        </member>
        <member name="P:Symbol.Barcode.ScanParamsAPI.FeedbackListPropertyInfo.Problem">
            <summary>
            The Problem property provides access to feedback parameters that can be set
            upon a non-fatal error event. 
            </summary>
            <value>
            A <see cref="T:Symbol.Barcode.ScanParamsAPI.FeedbackPropertyInfo"/> object will be returned. This object can
            be used to set parameters about the feedback.
            </value>
        </member>
        <member name="P:Symbol.Barcode.ScanParamsAPI.FeedbackListPropertyInfo.Progress">
            <summary>
            The Progress property provides access to feedback parameters that can be set
            upon an activity event. 
            </summary>
            <value>
            A <see cref="T:Symbol.Barcode.ScanParamsAPI.FeedbackPropertyInfo"/> object will be returned. This object can
            be used to set parameters about the feedback.
            </value>
        </member>
        <member name="T:Symbol.Barcode.ScanParamsAPI.FeedbackPropertyInfo">
            <summary>
            The FeedbackPropertyInfo class provides access to feedback parameters. 
            </summary>
            <remarks> 
            The FeedbackPropertyInfo class is normally constructed by the 
            FeedbackListPropertyInfo class and can be accessed through the 
            Reader.Parameters.Feedback.THE_FEEDBACK_TYPE properties (THE_FEEDBACK_PROPERTIES
            include Success, Fail, Proceed...etc.). This class is derived from Symbol.API
            and can be used as with the StandardForms classes to create a UI interface
            for modifying/viewing the parameters.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.ScanParamsAPI.FeedbackPropertyInfo.Save(System.Boolean)">
            <summary>
            Saves the parameters so that they can be restored later.
            </summary>
            <param name="bRecurseIntoSubClasses">When "true", the save procedure
            will recurse into the subclasses and save their parameters as well. 
            (i.e. perform a deep copy).
            </param>
            <returns>
            An object that represents the saved parameters.
            </returns>
        </member>
        <member name="M:Symbol.Barcode.ScanParamsAPI.FeedbackPropertyInfo.Restore(System.Object)">
            <summary>
            Restores saved parameters. The object passed as
            a parameter should be obtained using the <see cref="M:Symbol.Barcode.ScanParamsAPI.FeedbackPropertyInfo.Save(System.Boolean)"/> method.
            </summary>
            <param name="SaveInfo">An object obtained that contains the saved state</param>
        </member>
        <member name="P:Symbol.Barcode.ScanParamsAPI.FeedbackPropertyInfo.Text">
            <summary>
            A Text string that provides a friendly name for the class.
            </summary>
            <value>
            String that returns "Feedback".
            </value>
        </member>
        <member name="P:Symbol.Barcode.ScanParamsAPI.FeedbackPropertyInfo.BeepTime">
            <summary>
            Time to beep.
            </summary>
            <value>
            An integer that specifies the beep time in milliseconds (Range of 0-2000). 
            </value>
        </member>
        <member name="P:Symbol.Barcode.ScanParamsAPI.FeedbackPropertyInfo.BeepFrequency">
            <summary>
            Frequency of the beep sound.
            </summary>
            <value>
            An integer that specifies the frequency of the beep in hertz (Range of 2500-3500). 
            </value>
        </member>
        <member name="P:Symbol.Barcode.ScanParamsAPI.FeedbackPropertyInfo.LedTime">
            <summary>
            Time to light decode LED.
            </summary>
            <value>
            An integer that specifies the amount of time to light the decode LED in
            milliseconds (Range 0-5000).
            </value>
        </member>
        <member name="P:Symbol.Barcode.ScanParamsAPI.FeedbackPropertyInfo.WaveFile">
            <summary>
            Name of .WAV file to play as feedback.
            </summary>
            <value>
            A string that contains the absolute path to a .WAV file that will be played
            when the feedback event occurs.
            </value>
        </member>
        <member name="T:Symbol.Barcode.BarcodeReader">
            <summary>
            BarcodeReader component class provides a high level barcode Reader class
            for programmers who wish to use design time controls.
            </summary>
            <remarks>
            This class internally creates a Barcode.Reader and Barcode.ReaderData
            for use at runtime. This class also contains data binding capabilities.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.BarcodeReader.#ctor">
            <summary>
            The Default BarcodeReader constructor.
            </summary>
        </member>
        <member name="M:Symbol.Barcode.BarcodeReader.Finalize">
            <summary>
            Allows a BarcodeReader to attempt to free resources and perform other cleanup 
            operations before it is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Symbol.Barcode.BarcodeReader.Start">
            <summary>
            Start the read process.
            </summary>
        </member>
        <member name="M:Symbol.Barcode.BarcodeReader.Stop">
            <summary>
            Stop the read process.
            </summary>
        </member>
        <member name="M:Symbol.Barcode.BarcodeReader.Dispose">
            <summary>
            Free all resources used by object.
            </summary>
        </member>
        <member name="M:Symbol.Barcode.BarcodeReader.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Called when the list changes.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Symbol.Barcode.BarcodeReader.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Symbol.Barcode.BarcodeReader.AddIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            AddIndex bindinglist function. Not used.
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:Symbol.Barcode.BarcodeReader.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
            ApplySort bindinglist function. Not used.
            </summary>
            <param name="property"></param>
            <param name="direction"></param>
        </member>
        <member name="M:Symbol.Barcode.BarcodeReader.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            Find bindinglist method. Not used.
            </summary>
            <param name="property"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Symbol.Barcode.BarcodeReader.RemoveSort">
            <summary>
            RemoveSort binding list method. Not used.
            </summary>
        </member>
        <member name="M:Symbol.Barcode.BarcodeReader.AddNew">
            <summary>
            AddNew binding list method. Not used.
            </summary>
        </member>
        <member name="M:Symbol.Barcode.BarcodeReader.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            RemoveIndex binding list method. Not used.
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:Symbol.Barcode.BarcodeReader.System#Collections#IList#RemoveAt(System.Int32)">
            <summary>
            RemoveAt list member method. Not used.
            </summary>
        </member>
        <member name="M:Symbol.Barcode.BarcodeReader.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Insert list member method. Not used.
            </summary>
        </member>
        <member name="M:Symbol.Barcode.BarcodeReader.System#Collections#IList#Remove(System.Object)">
            <summary>
            Remove list member method. Not used.
            </summary>
        </member>
        <member name="M:Symbol.Barcode.BarcodeReader.Contains(System.Object)">
            <summary>
            Contains list member method. 
            </summary>
        </member>
        <member name="M:Symbol.Barcode.BarcodeReader.Clear">
            <summary>
            Clear list member method.
            </summary>
        </member>
        <member name="M:Symbol.Barcode.BarcodeReader.IndexOf(System.Object)">
            <summary>
            IndexOf list member method. 
            </summary>
        </member>
        <member name="M:Symbol.Barcode.BarcodeReader.Add(System.Object)">
            <summary>
            Add list member method.
            </summary>
        </member>
        <member name="M:Symbol.Barcode.BarcodeReader.CopyTo(System.Array,System.Int32)">
            <summary>
            CopyTo collection member.
            </summary>
        </member>
        <member name="M:Symbol.Barcode.BarcodeReader.GetEnumerator">
            <summary>
            GetEnumerator enumerable member.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Symbol.Barcode.BarcodeReader.Item(System.Int32)">
            <summary>
            An indexer that returns the scanned data at the given index.
            </summary>
            <value>
            A BarcodeData object that will provide the data read from the 
            barcode scanner at a paritcular index.
            </value>
        </member>
        <member name="P:Symbol.Barcode.BarcodeReader.Reader">
            <summary>
            Get the underlying Reader object.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.BarcodeReader.ReaderData">
            <summary>
            Get the ReaderData associated with the Reader.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.BarcodeReader.Parameters">
            <summary>
            Returns the scan parameters.
            </summary>
            <value>
            A ScanParams object.
            </value>
        </member>
        <member name="P:Symbol.Barcode.BarcodeReader.Decoders">
            <summary>
            Returns the decoder parameters.
            </summary>
            <value>
            A DecoderParams object.
            </value>
        </member>
        <member name="P:Symbol.Barcode.BarcodeReader.AllowNew">
            <summary>
            AllowNew bindinglist function. Not used.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.BarcodeReader.SortProperty">
            <summary>
            SortProperty bindinglist property. Not used.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.BarcodeReader.SupportsSorting">
            <summary>
            SupportsSorting bindinglist method. Not used.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.BarcodeReader.IsSorted">
            <summary>
            IsSorted binding list property. Not used.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.BarcodeReader.AllowRemove">
            <summary>
            AllowRemove binding list property. Not used.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.BarcodeReader.SupportsSearching">
            <summary>
            SupportsSearching binding list property. Always false.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.BarcodeReader.SortDirection">
            <summary>
            SortDirection binding list property. Not used.
            </summary>
        </member>
        <member name="E:Symbol.Barcode.BarcodeReader.ListChanged">
            <summary>
            ListChanged event fires when the list has been modified.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.BarcodeReader.SupportsChangeNotification">
            <summary>
            SupportsChangeNotification binding list property. Not used.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.BarcodeReader.AllowEdit">
            <summary>
            AllowEdit binding list method. Not used.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.BarcodeReader.IsReadOnly">
            <summary>
            IsReadOnly List member property. 
            </summary>
        </member>
        <member name="P:Symbol.Barcode.BarcodeReader.System#Collections#IList#Item(System.Int32)">
            <summary>
            List object indexer.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.BarcodeReader.IsFixedSize">
            <summary>
            IsFixedSize list member method. Not used.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.BarcodeReader.IsSynchronized">
            <summary>
            IsSynchronized collection member.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.BarcodeReader.Count">
            <summary>
            Count collection member.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.BarcodeReader.SyncRoot">
            <summary>
            SyncRoot collection member.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.ScanParams">
            <summary>
            The ScanParams class provides a level of abstraction for supported 
            scanning parameters that be easily modified by BarcodeReader control.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.ScanParams.CodeIdType">
            <summary>
            Gets/Sets the code id type.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.ScanParams.ScanType">
            <summary>
            Gets/Sets the scan type.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.ScanParams.BeepTime">
            <summary>
            Get/Sets the beep time.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.ScanParams.BeepFrequency">
            <summary>
            Get/Sets the beep frequency.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.ScanParams.LedTime">
            <summary>
            Get/Sets the led time.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.ScanParams.WaveFile">
            <summary>
            Get/Sets the wave file.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.DecoderParams">
            <summary>
            The DecoderParams class provides access to decoder parameters.
            </summary>
        </member>
        <member name="M:Symbol.Barcode.DecoderParams.#ctor">
            <summary>
            Default DecoderParams constructor.  The constructor should not be called by the user.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.UPCE0">
            <summary>
            Access to UPCE0 enabled state.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.UPCE0Params">
            <summary>
            Access to UPCE0 parameters.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.UPCA">
            <summary>
            Access to UPCEA enabled state.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.UPCAParams">
            <summary>
            Access to UPCEA parameters.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.EAN8">
            <summary>
            Access to EAN8 enabled state.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.EAN8Params">
            <summary>
            Access to EAN8 parameters.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.EAN13">
            <summary>
            Access to EAN13 enabled state.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.CODABAR">
            <summary>
            Access to CODABAR enabled state.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.CODABARParams">
            <summary>
            Access to CODABAR parameters.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.MSI">
            <summary>
            Access to MSI enabled state.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.MSIParams">
            <summary>
            Access to MSI parameters.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.CODE39">
            <summary>
            Access to CODE39 enabled state.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.CODE39Params">
            <summary>
            Access to CODE39 parameters.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.D2OF5">
            <summary>
            Access to D2OF5 enabled state.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.D2OF5Params">
            <summary>
            Access to D2OF5 parameters.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.I2OF5">
            <summary>
            Access to I2OF5 enabled state.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.I2OF5Params">
            <summary>
            Access to I2OF5 parameters.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.CODE128">
            <summary>
            Access to CODE128 enabled state.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.CODE128Params">
            <summary>
            Access to CODE128 parameters.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.KOREAN_3OF5">
            <summary>
            Access to KOREAN_3OF5 enabled state.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.KOREAN_3OF5Params">
            <summary>
            Access to KOREAN_3OF5 parameters.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.DecoderParams.dpCODABAR">
            <summary>
            dpCODABAR parameters class provides access to parameters.
            </summary>
        </member>
        <member name="M:Symbol.Barcode.DecoderParams.dpCODABAR.#ctor">
            <summary>
            Default codabar construtor.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.dpCODABAR.Redundancy">
            <summary>
            Specifies Redundancy.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.dpCODABAR.ClsiEditing">
            <summary>
            Specifies ClsiEditing
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.dpCODABAR.NotisEditing">
            <summary>
            Specifies NotisEditing.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.DecoderParams.dpCODE39">
            <summary>
            dpCODE39 parameters class provides access to CODE39 parameters.
            </summary>
        </member>
        <member name="M:Symbol.Barcode.DecoderParams.dpCODE39.#ctor">
            <summary>
            Default dpCODE39 constructor.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.dpCODE39.VerifyCheckDigit">
            <summary>
            Get/Sets the verify check digit parameter.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.dpCODE39.ReportCheckDigit">
            <summary>
            Get/Sets the report check digit parameter.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.dpCODE39.Concatenation">
            <summary>
            Get/Sets the concatenation parameter.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.dpCODE39.FullAscii">
            <summary>
            Get/Sets the full ascii parameter.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.dpCODE39.Redundancy">
            <summary>
            Get/Sets the redundancy parameter.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.dpCODE39.ConvertToCode32">
            <summary>
            Get/Sets the convert to code32 parameter.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.dpCODE39.Code32Prefix">
            <summary>
            Get/Sets the code32 prefix parameter.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.DecoderParams.dpD2OF5">
            <summary>
            dpD2OF5 parameters class provides access to D2OF5 parameters.
            </summary>
        </member>
        <member name="M:Symbol.Barcode.DecoderParams.dpD2OF5.#ctor">
            <summary>
            Default dpD2OF5 constructor.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.dpD2OF5.Redundancy">
            <summary>
            Get/Sets the redundancy parameter.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.DecoderParams.dpI2OF5">
            <summary>
            dpI2OF5 parameters class provides access to I2OF5 parameters.
            </summary>
        </member>
        <member name="M:Symbol.Barcode.DecoderParams.dpI2OF5.#ctor">
            <summary>
            Default dpI2OF5 constructor.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.dpI2OF5.Redundancy">
            <summary>
            Get/Sets the redundancy parameter.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.dpI2OF5.CheckDigitScheme">
            <summary>
            Get/Sets the check digit scheme parameter.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.dpI2OF5.ReportCheckDigit">
            <summary>
            Get/Sets the report check digit parameter.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.dpI2OF5.ConvertToEAN13">
            <summary>
            Get/Sets the convert to EAN13 parameter.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.DecoderParams.dpCODE11">
            <summary>
            dpCODE11 parameters class provides access to CODE11 parameters.
            </summary>
        </member>
        <member name="M:Symbol.Barcode.DecoderParams.dpCODE11.#ctor">
            <summary>
            Default dpCODE11 constructor.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.dpCODE11.Redundancy">
            <summary>
            Get/Sets the redundancy parameter.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.dpCODE11.CheckDigitCount">
            <summary>
            Get/Sets the check digit count parameter.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.dpCODE11.ReportCheckDigit">
            <summary>
            Get/Sets the report check digit parameter.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.DecoderParams.dpCODE128">
            <summary>
            dpCODE128 parameters class provides access to CODE128 parameters.
            </summary>
        </member>
        <member name="M:Symbol.Barcode.DecoderParams.dpCODE128.#ctor">
            <summary>
            Default dpCODE128 constructor.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.dpCODE128.Redundancy">
            <summary>
            Get/Sets the redundancy parameter.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.dpCODE128.EAN128">
            <summary>
            Get/Sets the EAN128 parameter.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.dpCODE128.ISBT128">
            <summary>
            Get/Sets the ISBT128 parameter.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.dpCODE128.Other128">
            <summary>
            Get/Sets the Other 128 parameter.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.DecoderParams.dpKOREAN_3OF5">
            <summary>
            dpKOREAN_3OF5 parameters class provides access to KOREAN_3OF5 parameters.
            </summary>
        </member>
        <member name="M:Symbol.Barcode.DecoderParams.dpKOREAN_3OF5.#ctor">
            <summary>
            Default dpKOREAN_3OF5 constructor.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.dpKOREAN_3OF5.Redundancy">
            <summary>
            Get/Sets the redundancy parameter.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.DecoderParams.dpPDF417">
            <summary>
            dpPDF417 parameters class provides access to PDF417 parameters.
            </summary>
        </member>
        <member name="M:Symbol.Barcode.DecoderParams.dpPDF417.#ctor">
            <summary>
            Default dpPDF417 constructor.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.DecoderParams.dpUPCE0">
            <summary>
            dpUPCE0 parameters class provides access to UPCE0 parameters.
            </summary>
        </member>
        <member name="M:Symbol.Barcode.DecoderParams.dpUPCE0.#ctor">
            <summary>
            Default dpUPCE0 constructor.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.dpUPCE0.ReportCheckDigit">
            <summary>
            Get/Sets the report check digit parameter.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.dpUPCE0.Preamble">
            <summary>
            Get/Sets the preamble parameter.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.dpUPCE0.ConvertToUPCA">
            <summary>
            Get/Sets the ConvertToUPCA parameter.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.DecoderParams.dpUPCA">
            <summary>
            dpUPCA parameters class provides access to UPCA parameters.
            </summary>
        </member>
        <member name="M:Symbol.Barcode.DecoderParams.dpUPCA.#ctor">
            <summary>
            Default dpUPCA constructor.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.dpUPCA.ReportCheckDigit">
            <summary>
            Get/Sets the report check digit parameter.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.dpUPCA.Preamble">
            <summary>
            Get/Sets the preamble parameter.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.DecoderParams.dpMSI">
            <summary>
            dpMSI parameters class provides access to MSI parameters.
            </summary>
        </member>
        <member name="M:Symbol.Barcode.DecoderParams.dpMSI.#ctor">
            <summary>
            Default dpMSI constructor.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.dpMSI.Redundancy">
            <summary>
            Get/Sets Redundancy state.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.dpMSI.CheckDigitCount">
            <summary>
            Get/Sets CheckDigitCount state.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.dpMSI.CheckDigitScheme">
            <summary>
            Get/Sets CheckDigitScheme state.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.dpMSI.ReportCheckDigit">
            <summary>
            Get/Sets ReportCheckDigit state.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.DecoderParams.dpEAN8">
            <summary>
            The dpEAN8 class provides access to EAN8 parameters.
            </summary>
        </member>
        <member name="M:Symbol.Barcode.DecoderParams.dpEAN8.#ctor">
            <summary>
            Default dpEAN8 constructor.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.DecoderParams.dpEAN8.ConvertToEAN13">
            <summary>
            ConvertToEAN13 decoder parameter.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.BarcodeData">
            <summary>
            BarcodeData class provides access to scanned data.
            </summary>
        </member>
        <member name="M:Symbol.Barcode.BarcodeData.#ctor(System.Object)">
            <summary>
            BarcodeData constructor.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="P:Symbol.Barcode.BarcodeData.Text">
            <summary>
            Returns the scanned data.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.BarcodeData.Type">
            <summary>
            Returns the type of the data.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.BarcodeData.TimeStamp">
            <summary>
            Returns the timestamp for the data.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.DecoderTypes">
            <summary>
            Enumeration of all barcode symbologies supported. Not all scanner
            hardware supports all symbologies, refer to your hardware manual
            for more information. 
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.UPCE0">
            <summary>
            The UPC-E0 symbology.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.UPCE1">
            <summary>
            The UPC-E1 symbology.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.UPCA">
            <summary>
            The UPC-A symbology.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.MSI">
            <summary>
            The MSI symbology.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.EAN8">
            <summary>
            The EAN-8 symbology.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.EAN13">
            <summary>
            The EAN-13 symbology.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.CODABAR">
            <summary>
            The CODABAR symbology.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.CODE39">
            <summary>
            The CODE-39 symbology.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.D2OF5">
            <summary>
            The Discrete 2 of 5 symbology.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.I2OF5">
            <summary>
            The Interleaved 2 of 5 symbology.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.CODE11">
            <summary>
            The CODE-11 symbology.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.CODE93">
            <summary>
            The CODE-93 symbology.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.CODE128">
            <summary>
            The CODE-128 symbology.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.IATA2OF5">
            <summary>
            The IATA 2 of 5 symbology.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.EAN128">
            <summary>
            The EAN-128 symbology.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.PDF417">
            <summary>
            The PDF 417 symbology.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.ISBT128">
            <summary>
            The ISBT 128 symbology.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.TRIOPTIC39">
            <summary>
            The TRIOPTIC 3 of 9 symbology.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.COUPON">
            <summary>
            The COUPON CODE symbology.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.BOOKLAND">
            <summary>
            The BOOKLAND EAN symbology.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.MICROPDF">
            <summary>
            The MICRO PDF symbology.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.CODE32">
            <summary>
            The CODE-32 symbology.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.MACROPDF">
            <summary>
            The MACRO PDF symbology.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.MAXICODE">
            <summary>
            The MAXICODE symbology.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.DATAMATRIX">
            <summary>
            The DATAMATRIX symbology.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.QRCODE">
            <summary>
            The QRCODE symbology.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.MACROMICROPDF">
            <summary>
            The MACRO MICRO PDF symbology.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.RSS14">
            <summary>
            The RSS-14 symbology.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.RSSLIM">
            <summary>
            The RSS limited symbology.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.RSSEXP">
            <summary>
            The RSS expanded symbology.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.POINTER">
            <summary>
            Pointer label type.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.IMAGE">
            <summary>
            Image label type.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.SIGNATURE">
            <summary>
            Signature label type.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.RESERVED_53">
            <summary>
            RESERVED.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.WEBCODE">
            <summary>
            The Scanlet WEBCODE symbology.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.CUECODE">
            <summary>
            The CUE CAT CODE symbology.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.COMPOSITE_AB">
            <summary>
            The COMPOSITE AB symbology.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.COMPOSITE_C">
            <summary>
            The COMPOSITE C symbology.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.TLC39">
            <summary>
            The TCIF Linked CODE 39 symbology.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.USPOSTNET">
            <summary>
            The US POSTNET symbology.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.USPLANET">
            <summary>
            The US PLANET symbology.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.UKPOSTAL">
            <summary>
            The UK POSTAL symbology.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.JAPPOSTAL">
            <summary>
            The JAPANESE POSTAL symbology.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.AUSPOSTAL">
            <summary>
            The AUSTRALIAN POSTAL symbology.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.DUTCHPOSTAL">
            <summary>
            The DUTCH POSTAL symbology.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.CANPOSTAL">
            <summary>
            The CANADIAN POSTAL symbology.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.AZTEC">
            <summary>
            The AZTEC symbology
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.MICROQR">
            <summary>
            The MICROQR symbology
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.KOREAN_3OF5">
            <summary>
            Korean 3 of 5 symbology
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.US4STATE">
            <summary>
            US4State Symbology
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.FIRST">
            <summary>
            The first item in the DecoderTypes enumeration. This item is 
            used during simulation mode to cycle through all symbologies.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.NEXT">
            <summary>
            The next item in the DecoderTypes enumeration. This item is 
            used during simulation mode to cycle through all symbologies.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.LAST">
            <summary>
            The last item in the DecoderTypes enumeration. This item is 
            used during simulation mode to cycle through all symbologies.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DecoderTypes.UNKNOWN">
            <summary>
            The symbology or labeltype is unknown.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.ReaderDataTypes">
            <summary>
            Data types for the data that is read from barcode scanner.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.ReaderDataTypes.Binary">
            <summary>
            The buffer of memory used to access the hardware will hold raw binary data.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.ReaderDataTypes.Text">
            <summary>
            The buffer of memory used to access the hardware will hold text.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.ReaderDataLengths">
            <summary>
            Length of ReaderData memory buffer.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.ReaderDataLengths.DefaultText">
            <summary>
            Default for text. 55 characters in text mode, bytes in binary mode.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.ReaderDataLengths.MaximumLabel">
            <summary>
            Maximum amount memory for data. 7905 character in text mode, bytes in binary mode.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.States">
            <summary>
            Defines the different states of the barcode Reader.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.States.STOPPED">
            <summary>
            Scanner is not enabled.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.States.IDLE">
            <summary>
            Scanner is enabled but no reads are pending.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.States.WAITING">
            <summary>
            Scanner has one or more reads pending and is waiting for trigger event.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.States.READY">
            <summary>
            Scanner beam is on and it is acquiring data.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.States.AIMING">
            <summary>
            Scanner beam is on for aiming purposes.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.States.EMPTY">
            <summary>
            Scanner beam is off waiting for Klasse Eins Gas Tank to recover.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.States.FIRST">
            <summary>
            The first item in the States enumeration. This item is 
            used during simulation mode to cycle through all states.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.States.LAST">
            <summary>
            The last item in the States enumeration. This item is 
            used during simulation mode to cycle through all states.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.EventTypes">
            <summary>
            Defines the different types of events that can occur for the barcode Reader.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.EventTypes.ERROR">
            <summary>
            An error occurred while trying to wait for an event.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.EventTypes.STATE_CHANGE">
            <summary>
            The state of the scanner has changed.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.EventTypes.ACTIVITY">
            <summary>
            The scanner is busy/active. This event is used for image downloading activity
            and 2D hand-raster activity.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.EventTypes.IMAGE_CAPTURE">
            <summary>
            The Scanner has captured an image and started to download.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.EventTypes.IMAGE_ERROR">
            <summary>
            The Scanner has encountered a fatal error downloading an image. 
            </summary>
        </member>
        <member name="F:Symbol.Barcode.EventTypes.SEQUENCE_START">
            <summary>
            The Scanner has captured the first barcode in a concatenation sequence. 
            </summary>
        </member>
        <member name="F:Symbol.Barcode.EventTypes.SEQUENCE_CONTINUE">
            <summary>
            The Scanner has captured another barcode in a concatenation sequence.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.EventTypes.SEQUENCE_FAIL">
            <summary>
            The Scanner has encountered a fatal concatenation error. 
            </summary>
        </member>
        <member name="F:Symbol.Barcode.EventTypes.SEQUENCE_ERROR">
            <summary>
            The Scanner has encountered a non-fatal concatenation error.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.EventTypes.FIRST">
            <summary>
            The first item in the EventTypes enumeration. This item is 
            used during simulation mode to cycle through all event types.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.EventTypes.LAST">
            <summary>
            The last item in the EventTypes enumeration. This item is 
            used during simulation mode to cycle through all event types.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.CodeIdTypes">
            <summary>
            Describes the type of Code ID to be reported.
            </summary>
            <remarks>
             The Symbol Technologies, Inc. 
            CodeIDs are documented in the following table:
            <list type="table">
            <listheader>
            <term>Code Type</term>
            <description>Symbol Tech. Identifier</description>
            </listheader>
            <item><term>UPC-A, UPC-E, UPC-E1, UPC-E0, EAN-13, EAN-8</term>
            <description>A</description></item>
            <item><term>Code 39, Code 39 Full ASCII, Code 32</term>
            <description>B</description></item>
            <item><term>Codabar</term>
            <description>C</description></item>
            <item><term>Code 128, ISBT 128</term>
            <description>D</description></item>
            <item><term>Code 93</term>
            <description>E</description></item>
            <item><term>Interleaved 2 of 5</term>
            <description>F</description></item>
            <item><term>Discrete 2 of 5, D 2 of 5 IATA</term>
            <description>G</description></item>
            <item><term>MSI Plessey</term>
            <description>J</description></item>
            <item><term>UCC/EAN 128</term>
            <description>K</description></item>
            <item><term>Bookland EAN</term>
            <description>L</description></item>
            <item><term>Trioptic Code 39</term>
            <description>M</description></item>
            <item><term>UPC/EAN Coupon Code</term>
            <description>N</description></item>
            <item><term>PDF417</term>
            <description>X</description></item>
            <item><term>Data Matrix</term>
            <description>P00</description></item>
            <item><term>Maxicode</term>
            <description>P02</description></item>
            <item><term>US Postnet</term>
            <description>P03</description></item>
            <item><term>US Planet</term>
            <description>P04</description></item>
            <item><term>Japan Postal</term>
            <description>P05</description></item>
            <item><term>UK Postal</term>
            <description>P06</description></item>
            <item><term>Australian Postal</term>
            <description>P09</description></item>
            </list>
            </remarks>
        </member>
        <member name="F:Symbol.Barcode.CodeIdTypes.None">
            <summary>
            No Code ID.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.CodeIdTypes.Symbol">
            <summary>
            Use Symbol Technologies Code ID.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.CodeIdTypes.AIM">
            <summary>
            Use AIM Code ID.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.ScanTypes">
            <summary>
            The type of scan requests.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.ScanTypes.Foreground">
            <summary>
            Foreground reads take priorty over background reads. When submitting
            a foreground read the application should be the topmost window.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.ScanTypes.Background">
            <summary>
            Background reads can be superceded by foreground reads. Background reads
            are usually submitted by background applications such as a scan wedge program.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.ScanTypes.Monitor">
            <summary>
            Monitor reads provide a way in which programs can listen in on all scans
            that take place. 
            </summary>
        </member>
        <member name="T:Symbol.Barcode.DisabledEnabled">
            <summary>
            Enumeration used to set the state of local feedback. 
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DisabledEnabled.Disabled">
            <summary>
            When Disabled, feedback is only done on the scanner device.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DisabledEnabled.Enabled">
            <summary>
            When Enabled, feedback is given locally. (e.g. at the Reader)
            </summary>
        </member>
        <member name="T:Symbol.Barcode.UPC">
            <summary>
            UPC class provides a level of abstraction for UPC specific parameters.
            </summary>
            <remarks>
            The UPC class provides enumerated types that are specific to this
            symbology. 
            </remarks>
        </member>
        <member name="T:Symbol.Barcode.UPC.Preambles">
            <summary>
            Controls the preamble applied to the bar code.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.UPC.Preambles.None">
            <summary>
            No preamble
            </summary>
        </member>
        <member name="F:Symbol.Barcode.UPC.Preambles.System">
            <summary>
            System character preamble.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.UPC.Preambles.CountryAndSystem">
            <summary>
            Both country and system code preamble.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.UPCE0">
            <summary>
            UPCE0 class is inherited from UPC and provides UPC specific enumerated types.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.UPCE1">
            <summary>
            UPCE1 class is inherited from UPC and provides UPC specific enumerated types.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.UPCA">
            <summary>
            UPCEA class is inherited from UPC and provides UPC specific enumerated types.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.MSI">
            <summary>
            MSI class provides a level of abstraction for MSI specific parameters.
            </summary>
            <remarks>
            The MSI class provides enumerated types that are specific to this
            symbology. 
            </remarks>
        </member>
        <member name="T:Symbol.Barcode.MSI.CheckDigitCounts">
            <summary>
            The number of check digits to be verified.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.MSI.CheckDigitCounts.One">
            <summary>
            One check digit.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.MSI.CheckDigitCounts.Two">
            <summary>
            Two check digits.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.MSI.CheckDigitSchemes">
            <summary>
            The check digit scheme to verify.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.MSI.CheckDigitSchemes.Mod_11_10">
            <summary>
            The first check digit is MOD 11, the second is MOD 10.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.MSI.CheckDigitSchemes.Mod_10_10">
            <summary>
            Both check digits are MOD 10.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.I2OF5">
            <summary>
            I2OF5 class provides a level of abstraction for specific enumerated types.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.I2OF5.CheckDigitSchemes">
            <summary>
            The check digit type to verify.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.I2OF5.CheckDigitSchemes.None">
            <summary>
            No check digit.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.I2OF5.CheckDigitSchemes.USS">
            <summary>
            USS check digit.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.I2OF5.CheckDigitSchemes.OPCC">
            <summary>
            OPCC check digit.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.CODE11">
            <summary>
            CODE11 class provides a level of abstraction for specific enumerated types.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.CODE11.CheckDigitCounts">
            <summary>
            The number of check digits to verify.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.CODE11.CheckDigitCounts.None">
            <summary>
            No check digit.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.CODE11.CheckDigitCounts.One">
            <summary>
            One check digit.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.CODE11.CheckDigitCounts.Two">
            <summary>
            Two check digits.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.UPCEAN">
            <summary>
            UPCEAN class provides a level of abstraction for specific enumerated types.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.UPCEAN.SecurityLevels">
            <summary>
            The UPC/EAN security level.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.UPCEAN.SecurityLevels.None">
            <summary>
            No UPC/EAN security.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.UPCEAN.SecurityLevels.Ambiguous">
            <summary>
            Check ambiguous characters.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.UPCEAN.SecurityLevels.All">
            <summary>
            Check all characters.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.UPCEAN.SupplementalModes">
            <summary>
            The type of supplemental mode. 
            </summary>
        </member>
        <member name="F:Symbol.Barcode.UPCEAN.SupplementalModes.None">
            <summary>
            Supplementals ignored.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.UPCEAN.SupplementalModes.Always">
            <summary>
            Will not decode UPC/EAN without supplementals.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.UPCEAN.SupplementalModes.Auto">
            <summary>
            Auto-discriminates supplementals.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.COMPOSITE_AB">
            <summary>
            COMPOSITE_AB class provides a level of abstraction for specific enumerated types.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.COMPOSITE_AB.UCCLinkMode">
            <summary>
            Describes the UCC link mode state
            </summary>
        </member>
        <member name="F:Symbol.Barcode.COMPOSITE_AB.UCCLinkMode.UCC_NEVER">
            <summary>
            Link flag ignored.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.COMPOSITE_AB.UCCLinkMode.UCC_ALWAYS">
            <summary>
            Always linked .
            </summary>
        </member>
        <member name="F:Symbol.Barcode.COMPOSITE_AB.UCCLinkMode.UCC_AUTO">
            <summary>
            Auto-discriminate.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.READER_TYPE">
            <summary>
            Describes the bar code reader type these parameters apply to. Read only.
            This value determines the structure of the ReaderSpecific sub-structure.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.READER_TYPE.READER_TYPE_LASER">
            <summary>
            Laser bar code reader.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.READER_TYPE.READER_TYPE_CONTACT">
            <summary>
            Contact wand bar code reader.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.READER_TYPE.READER_TYPE_IMAGER">
            <summary>
            Imager bar code reader.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.AIM_TYPE">
            <summary>
            Describes the type of aiming to use.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.AIM_TYPE.AIM_TYPE_TRIGGER">
            <summary>
            Dual-stage trigger based aiming.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.AIM_TYPE.AIM_TYPE_TIMED_HOLD">
            <summary>
            Timed hold aim type.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.AIM_TYPE.AIM_TYPE_TIMED_RELEASE">
            <summary>
            Timed release aim type.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.AIM_MODE">
            <summary>
            Describes the aiming mode to use.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.AIM_MODE.AIM_MODE_NONE">
            <summary>
            No aiming. (Can be overridden if PicklistMode is set to True).
            </summary>
        </member>
        <member name="F:Symbol.Barcode.AIM_MODE.AIM_MODE_DOT">
            <summary>
            Dot aiming.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.AIM_MODE.AIM_MODE_SLAB">
            <summary>
            Slab aiming
            </summary>
        </member>
        <member name="F:Symbol.Barcode.AIM_MODE.AIM_MODE_RETICLE">
            <summary>
            Reticle aiming
            </summary>
        </member>
        <member name="T:Symbol.Barcode.RASTER_MODE">
            <summary>
            Describes the type of vertical rastering to use.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.RASTER_MODE.RASTER_MODE_NONE">
            <summary>
            No rastering.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.RASTER_MODE.RASTER_MODE_OPEN_ALWAYS">
            <summary>
            Rastering always full open.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.RASTER_MODE.RASTER_MODE_SMART">
            <summary>
            Smart rastering mode.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.LINEAR_SECURITY_LEVEL">
            <summary>
            Describes the linear security level used during decoding.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.LINEAR_SECURITY_LEVEL.SECURITY_REDUNDANCY_AND_LENGTH">
            <summary>
            Two times redundancy based on redundancy flags and code length.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.LINEAR_SECURITY_LEVEL.SECURITY_SHORT_OR_CODABAR">
            <summary>
            Two times redundancy if short bar code or CODABAR.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.LINEAR_SECURITY_LEVEL.SECURITY_ALL_TWICE">
            <summary>
            Two times redundancy for all bar codes.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.LINEAR_SECURITY_LEVEL.SECURITY_LONG_AND_SHORT">
            <summary>
            Two times redundancy for long bar codes, three times for short bar codes.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.LINEAR_SECURITY_LEVEL.SECURITY_ALL_THRICE">
            <summary>
            Three times redundancy for all bar codes.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.FOCUS_MODE">
            <summary>
            Focus mode to use.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.FOCUS_MODE.FOCUS_MODE_FIXED">
            <summary>
            Fixed focus.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.FOCUS_POSITION">
            <summary>
            Focus position to use.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.FOCUS_POSITION.FOCUS_POSITION_FAR">
            <summary>
            Far focus.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.FOCUS_POSITION.FOCUS_POSITION_NEAR">
            <summary>
            Far focus.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.DPM_MODE">
            <summary>
            Direct Part Marking (DPM) mode to use.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DPM_MODE.DPM_MODE_ENABLED">
            <summary>
            Enable decoding of DPM bar codes
            </summary>
        </member>
        <member name="F:Symbol.Barcode.DPM_MODE.DPM_MODE_DISABLED">
            <summary>
            Disable decoding of DPM barcodes
            </summary>
        </member>
        <member name="T:Symbol.Barcode.ILLUMINATION_MODE">
            <summary>
            Illumination mode to use
            </summary>
        </member>
        <member name="F:Symbol.Barcode.ILLUMINATION_MODE.ILLUMINATION_AUTO">
            <summary>
            In this mode, the auto exposure algorithms will decide whether illumination is required or not.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.ILLUMINATION_MODE.ILLUMINATION_ALWAYS_OFF">
            <summary>
            In this mode, external illumination is always off.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.ILLUMINATION_MODE.ILLUMINATION_ALWAYS_ON">
            <summary>
            In this mode, external illumination is always on.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.Device">
            <summary>
            The Symbol.Barcode.Device class provides information about to all the
            available scanners in the system.
            </summary>
            <remarks>
            The Symbol.Barcode.Device class provides an excellent starting point for applications
            that wish to gain more information about all the scanners available. The
            AvailableDevices property provides a static Device array with each entry mapping to
            available scanning hardware. Each entry contains information about the hardware and 
            can also be used to contruct a <see cref="T:Symbol.Barcode.Reader"/> object. This is the 
            recommended method for instantiating Reader objects.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.Device.#ctor">
            <summary>
            Default device class constructor.
            </summary>
            <remarks>
            By default, a Barcode.Device object will be contructed with the "SCN1:" scanner
            targeted. Its friendly name will be "Default Reader".
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.Device.#ctor(System.String)">
            <summary>
            Device class constructor with settable device name.
            </summary>
            <remarks>
            A Barcode.Device object will be contructed with the given Device Name. Its 
            friendly name will be "Explicit Reader".
            </remarks>
            <param name="sDeviceName">The name of the device (should be in the form "SCNx:",
            where the x is the number of the scanner).</param>
        </member>
        <member name="M:Symbol.Barcode.Device.#ctor(System.String,System.String)">
            <summary>
            Device class constructor with settable device name and friendly name.
            </summary>
            <remarks>
            A Barcode.Device object will be contructed with the given Device Name and Friendly
            Name.
            </remarks>
            <param name="sDeviceName">The name of the device (should be in the form "SCNx:",
            where the x is the number of the scanner).</param>
            <param name="sFriendlyName">A friendly name for the device. Can be any string.</param>
        </member>
        <member name="P:Symbol.Barcode.Device.Title">
            <summary>
            Static title of the barcode device class.
            </summary>
            <value>
            A String that returns "Barcode".
            </value>
        </member>
        <member name="P:Symbol.Barcode.Device.AvailableDevices">
            <summary>
            The AvailableDevices property can be used to obtain a list of all available 
            hardware for use with the barcode classes.
            </summary>
            <remarks>
            The AvailableDevices property provides a static Device array with each entry
            mapping to available scanning hardware. Each entry contains information about
            the hardware and can also be used to contruct a <see cref="T:Symbol.Barcode.Reader"/>
            object. This is the recommended method for instantiating Reader objects.
            </remarks>
            <value>
            A <see cref="T:Symbol.Barcode.Device"/> array that represents all available scanning hardware.
            </value>
        </member>
        <member name="T:Symbol.Barcode.BarcodeStatus">
            <summary>
            The BarcodeStatus class provides access to notification information.
            </summary>
            <remarks>
            The BarcodeStatus class is normally obtained from the <see cref="M:Symbol.Barcode.Reader.GetNextStatus"/>
            method. The GetNextStatus() method is usually called when a StatusNotify event
            has been fired and your event processing method (EventHandler) has been invoked.
            During your event processing the BarcodeStatus object is obtained so that
            information about the status change can be retrieved.
            <seealso cref="M:Symbol.Barcode.Reader.GetNextStatus"/> <seealso cref="E:Symbol.Barcode.Reader.StatusNotify"/>
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.BarcodeStatus.#ctor(Symbol.Barcode.EventTypes,Symbol.Barcode.States,System.String)">
            <summary>
            The BarcodeStatus constructor is not normally called by the developer.
            </summary>
            <param name="et">An EventTypes enumerated type that defines the type of 
            event that has occurred.</param>
            <param name="es">A States enumerated type that defines the new state of 
            the Reader.</param>
            <param name="s">The state of the Reader in string form.</param>
        </member>
        <member name="P:Symbol.Barcode.BarcodeStatus.Type">
            <summary>
            Retrieves the Barcode Reader event type.
            </summary>
            <value>
            An EventTypes member that defines the type of event that has occured.
            </value>
        </member>
        <member name="P:Symbol.Barcode.BarcodeStatus.State">
            <summary>
            Retrieves the Barcode.Reader event state.
            </summary>
            <value>
            A State member that defines the new state of the Reader.
            </value>
        </member>
        <member name="P:Symbol.Barcode.BarcodeStatus.Text">
            <summary>
            Retrieves the Barcode.Reader state in string form.
            </summary>
            <value>
            The string representation of the Barcode.Reader state.
            </value>
        </member>
        <member name="T:Symbol.Barcode.Info">
            <summary>
            The Barcode.Info Class contains information about the scanner.
            </summary>
            <remarks>
            The Info class is normally constructed by the Reader class and can be accessed
            using the Reader.Info property.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.Info.#ctor(Symbol.Barcode.Reader)">
            <summary>
            The Info class constructor is not normally called.
            </summary>
            <param name="r">A Reader object from which the information will be obtained.</param>
        </member>
        <member name="P:Symbol.Barcode.Info.IsEnabled">
            <summary>
            Specifies whether or not the Reader is enabled.
            </summary>
            <value>
            A boolean flag which when true indicates that the Reader is enabled, otherwise it
            is disabled.
            </value>
        </member>
        <member name="P:Symbol.Barcode.Info.IsSimulating">
            <summary>
            Read only property returns whether or not the reader is in simulation mode.
            </summary>
            <remarks>
            Simulation mode is used primarily by the class libraries to allow support for 
            programming using the "stock" emulators provided by Microsoft. While in
            simulation mode scans are faked so that programs can be tested and developed.
            </remarks>
            <value>
            A boolean flag which when true indicates that the Reader is in simulation mode, 
            otherwise actual hardware has been targeted.
            </value>
        </member>
        <member name="P:Symbol.Barcode.Info.PendingReads">
            <summary>
            Returns the number of pending reads.
            </summary>
            <remarks>
            A pending read is a read that has been submitted but has not yet completed. To 
            submit a pending read call the <see cref="M:Symbol.Barcode.Actions.Read(Symbol.Generic.ReaderData)"/> method. A read
            completes by either a successful decode, a failed decode, or due to a cancellation of 
            the read.
            </remarks>
            <value>
            An integer which returns the number of current pending reads.
            </value>
        </member>
        <member name="P:Symbol.Barcode.Info.SoftTrigger">
            <summary>
            The state of the soft-trigger.
            </summary>
            <remarks>
            A soft-trigger is a trigger that has been initiated via software. Unlike a hard
            trigger initiated by a physical button press.
            </remarks>
            <value>
            A boolean flag which when true sets the state of the soft-trigger to on. If a 
            read is pending then the laser will turn on. When the flag is set to false the 
            laser will turn off.
            </value>
        </member>
        <member name="M:Symbol.Barcode.BarcodeMarshal.Open(System.String)">
            Marshal the Scan Open call.
        </member>
        <member name="M:Symbol.Barcode.BarcodeMarshal.Close">
            Marshal the Scan Close call.
        </member>
        <member name="T:Symbol.Barcode.Reader">
            <summary>
            The Barcode.Reader class can be considered the primary class of the Barcode class
            library. It provides access to actions, information, and parameters.
            </summary>
            <remarks>
            The Reader class provides all the capabilities of the scanner. It is normally constructed
            by having a <see cref="T:Symbol.Barcode.Device"/> object passed in as a parameter. Once created, 
            actions can be performed on the reader using object returned from the 
            <see cref="P:Symbol.Barcode.Reader.Actions"/> property. One of the most commonly used actions is the 
            submitting of a <see cref="M:Symbol.Barcode.Actions.Read(Symbol.Generic.ReaderData)"/> request. To perform a Read you will need to
            contruct a <see cref="T:Symbol.Barcode.ReaderData"/> object and pass it as a parameter to the 
            Read method. You will then need to attach to the <see cref="E:Symbol.Barcode.Reader.ReadNotify"/> event
            to be notified when a read completes.<para> Decoder and scan parameter objects can be
            access using the Reader.Decoders and Reader.Parameters properties, respectively.
            </para><para>The Dispose method of the Reader should be called when the object is no
            longer needed by the application.</para>
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.Reader.#ctor">
            <summary>
            Default Reader constructor creates an instance using the first available device.
            </summary>
            <remarks>
            The first available device may be a Simulated device if no scanning hardware is
            found. To be sure that the correct device is targeted during the instantiation of 
            the Reader, it is suggested that you specify the Device fully using the other
            Reader constructors.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.Reader.#ctor(System.String)">
            <summary>
            Reader constructor with settable device name.
            </summary>
            <param name="sReaderName">A string that contains the device name of the hardware
            to access. This is normally of the form "SCNx:", where the x is the number of the
            scanner.</param>
        </member>
        <member name="M:Symbol.Barcode.Reader.#ctor(Symbol.Generic.Device)">
            <summary>
            Reader constructor with settable Barcode.Device.
            </summary>
            <remarks>
            This is the recommended constructor to use when creating a Reader object.
            </remarks>
            <param name="d">A Generic.Device or <see cref="T:Symbol.Barcode.Device"/> object that targets a particular
            scanner.</param>
        </member>
        <member name="M:Symbol.Barcode.Reader.Finalize">
            <summary>
            Allows a Reader to attempt to free resources and perform other cleanup 
            operations before it is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Symbol.Barcode.Reader.Dispose">
            <summary>
            Frees up all resources used by the Reader, including any objects it has created. 
            It is strongly recommended that this method be called when the Reader is no longer
            needed by the application.
            </summary>
        </member>
        <member name="M:Symbol.Barcode.Reader.GetNextReaderData">
            <summary>
            Gets the next ReaderData object from the read completion queue.
            </summary>
            <remarks>
            The GetNextReaderData method is most commonly called by methods that have been
            invoked via the ReadNotify event. This method provides access to the ReaderData
            object of completed reads (whether the reads have been completed successfully or
            not should be determined from the status information provided by the ReaderData
            object).
            </remarks>
            <returns>A <see cref="T:Symbol.Barcode.ReaderData"/> object that has completed.</returns>
        </member>
        <member name="M:Symbol.Barcode.Reader.GetNextStatus">
            <summary>
            Gets the next BarcodeStatus object from the scan status event queue.
            </summary>
            <remarks>
            The GetNextStatus method is most commonly called by methods that have been
            invoked via the StatusNotify event. This method provides access to the BarcodeStatus
            object that contains information about the scan event that has occured.
            </remarks>
            <returns>A <see cref="T:Symbol.Barcode.BarcodeStatus"/> object with scan event
            information.</returns>
        </member>
        <member name="M:Symbol.Barcode.Reader.ToString">
            <summary>
            String representation of class.
            </summary>
            <returns>The device name of the Reader in string form.</returns>
        </member>
        <member name="M:Symbol.Barcode.Reader.Save(System.Boolean)">
            <summary>
            Saves the parameters so that they can be restored later if necessary.
            </summary>
            <param name="bRecurseIntoSubClasses">When "true", the save procedure
            will recurse into the subclasses and save their parameters as well. 
            (i.e. perform a deep copy).
            </param>
            <returns>
            An object that represents the saved parameters.
            </returns>
        </member>
        <member name="M:Symbol.Barcode.Reader.Restore(System.Object)">
            <summary>
            Restores saved parameters. The object passed as
            a parameter should be obtained using the <see cref="M:Symbol.Barcode.Reader.Save(System.Boolean)"/> method.
            </summary>
            <param name="SaveInfo">An object obtained that contains the saved state</param>
        </member>
        <member name="M:Symbol.Barcode.Reader.OnReadNotify(System.EventArgs)">
            <summary>
            Internal method called by MessageWindow class to notify UI thread of read. 
            </summary>
            <param name="e">A System.EventArgs object</param>
        </member>
        <member name="M:Symbol.Barcode.Reader.OnStatusNotify(System.EventArgs)">
            <summary>
            Internal method called by MessageWindow class to notify UI thread of read. 
            </summary>
            <param name="e">A System.EventArgs object</param>
        </member>
        <member name="E:Symbol.Barcode.Reader.ReadNotify">
            <summary>
            Attach to this notification event to be called back when a read completes.
            </summary>
            <value>
            A <see cref="T:System.EventHandler"/> delegate of the method that will be invoked
            when a read completes.
            </value>
        </member>
        <member name="E:Symbol.Barcode.Reader.StatusNotify">
            <summary>
            Attach to this notification event to be called back when a scan event occurs.
            </summary>
            <value>
            A <see cref="T:System.EventHandler"/> delegate of the method that will be invoked
            when a scan event occurs.
            </value>
        </member>
        <member name="P:Symbol.Barcode.Reader.Actions">
            <summary>
            Provides access to actions that can be performed on the Reader.
            </summary>
            <value>A <see cref="T:Symbol.Barcode.Actions"/> object.</value>
        </member>
        <member name="P:Symbol.Barcode.Reader.Info">
            <summary>
            Provides access to information about the Reader.
            </summary>
            <value> A <see cref="T:Symbol.Barcode.Info"/> object.</value>
        </member>
        <member name="P:Symbol.Barcode.Reader.Version">
            <summary>
            Provides access to version information.
            </summary>
            <value> A <see cref="T:Symbol.Barcode.Version"/> object.</value>
        </member>
        <member name="P:Symbol.Barcode.Reader.Text">
            <summary>
            Returns the name of the device being used for the Reader.
            </summary>
            <value>String that contains the Device name</value>
        </member>
        <member name="P:Symbol.Barcode.Reader.Decoders">
            <summary>
            Provides access to Decoder-specific parameters so that they can be viewed
            and modified.
            </summary>
            <value>
            A <see cref="T:Symbol.Barcode.DecoderAPI"/> object that contains the decoders.
            </value>
        </member>
        <member name="P:Symbol.Barcode.Reader.Parameters">
            <summary>
            Provides access to scan-specific parameters so that they can be viewed
            and modified.
            </summary>
            <value>
            A <see cref="T:Symbol.Barcode.ScanParamsAPI"/> object that contains the scan parameters.
            </value>
        </member>
        <member name="P:Symbol.Barcode.Reader.ReaderParameters">
            <summary>
            Provides access to Reader-specific parameters so that they can be viewed
            and modified.
            </summary>
            <value>
            A <see cref="T:Symbol.Barcode.ReaderParams"/> object that contains the reader parameters.
            </value>
        </member>
        <member name="P:Symbol.Barcode.Reader.UPCEAN">
            <summary>
            Provides access to UPC/EAN-specific parameters so that they can be viewed
            and modified.
            </summary>
            <value>
            A <see cref="T:Symbol.Barcode.UPCEANParamsAPI"/> object that contains the parameters.
            </value>
        </member>
        <member name="T:Symbol.Barcode.ReaderData">
            <summary>
            ReaderData class encapsulates all the scanned data and meta-data for a given read.
            </summary>
            <remarks>
            The ReaderData class is most commonly used to create objects that will be passed to the
            <see cref="M:Symbol.Barcode.Actions.Read(Symbol.Generic.ReaderData)"/> method. This will start a pending read.
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.ReaderData.#ctor(Symbol.Barcode.ReaderDataTypes,System.Int32)">
            <summary>
            ReaderData constructor with integer based buffer size.
            </summary>
            <param name="ReaderDataType">A <see cref="T:Symbol.Barcode.ReaderDataTypes"/> member that specifies 
            whether the memory buffer sent to the hardware will hold text or raw binary data.
            </param>
            <param name="nBufferSize">An integer that specifies the size of the memory buffer
            in bytes for binary mode, in characters for text mode.</param>
        </member>
        <member name="M:Symbol.Barcode.ReaderData.#ctor(Symbol.Barcode.ReaderDataTypes,Symbol.Barcode.ReaderDataLengths)">
            <summary>
            ReaderData constructor with enumerated type buffer size.
            </summary>
            <param name="ReaderDataType">A <see cref="T:Symbol.Barcode.ReaderDataTypes"/> member that specifies 
            whether the memory buffer sent to the hardware will hold text or raw binary data.
            </param>
            <param name="nBufferSize">An integer that specifies the size of the memory buffer
            in bytes for binary mode, in characters for text mode.</param>
        </member>
        <member name="M:Symbol.Barcode.ReaderData.Finalize">
            <summary>
            Allows a ReaderData to attempt to free resources and perform other cleanup 
            operations before it is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Symbol.Barcode.ReaderData.Dispose">
            <summary>
            Release all resources used by ReaderData object.
            </summary>
            <remarks> 
            It is highly recommended that this method be called when the ReaderData object is no
            longer being used by the application. <para>Note: Do not Dispose of the ReaderData
            object until any Reads associated with it have been cancelled.</para>
            </remarks>
        </member>
        <member name="M:Symbol.Barcode.ReaderData.ToString">
            <summary>
            Returns the scanned data text.
            </summary>
            <returns>
            A string of the scanned data if the memory buffer has been set to text mode.
            </returns>
            <exception cref="T:Symbol.Exceptions.InvalidDataTypeException"> An 
            InvalidDataTypeException is thrown if this property is accessed and they
            memory buffer has been set to binary mode. </exception>
        </member>
        <member name="P:Symbol.Barcode.ReaderData.IsText">
            <summary>
            Specifies whether or not the ReaderData memory buffer is set to text mode.
            </summary>
            <value>
            A boolean flag which when true indicates that the memory buffer is set to 
            text mode, otherwise the memory buffer is set to binary mode.
            </value>
        </member>
        <member name="P:Symbol.Barcode.ReaderData.IsPending">
            <summary>
            Specifies whether or not the ReaderData is currently in a pending read situation.
            </summary>
            <value>
            A boolean flag which when true indicate that the ReaderData has not completed a  
            read that has been requested of it. Reads will be pending until they complete 
            with a valid decode, fail with an error, or are cancelled.
            </value>
        </member>
        <member name="P:Symbol.Barcode.ReaderData.IsAllocated">
            <summary>
            Specifies whether or not a memory buffer has been allocated for the ReaderData.
            </summary>
            <value>
            A boolean flag which when true indicates that a valid memory buffer has been 
            allocated, otherwise the memory buffer has not been allocated.
            </value>
        </member>
        <member name="P:Symbol.Barcode.ReaderData.BufferSize">
            <summary>
            Specifies the memory buffer size allocated by the ReaderData.
            </summary>
            <value>
            An integer which specifies the memory buffer size in bytes for binary mode or 
            characters for text mode.
            </value>
        </member>
        <member name="P:Symbol.Barcode.ReaderData.Text">
            <summary>
            Returns the scanned data text.
            </summary>
            <value>
            A string of the scanned data if the memory buffer has been set to text mode.
            </value>
            <exception cref="T:Symbol.Exceptions.InvalidDataTypeException"> An InvalidDataTypeException
            is thrown if this property is accessed and they memory buffer has been set 
            to binary mode. </exception>
        </member>
        <member name="P:Symbol.Barcode.ReaderData.RawData">
            <summary>
            Returns a byte array with the scanned data.
            </summary>
            <value>
            A byte array with the scanned data if the ReaderDataType has been set to binary mode.
            </value>
            <exception cref="T:Symbol.Exceptions.InvalidDataTypeException"> An InvalidDataTypeException
            is thrown if this property is accessed and ReaderDataType has been set 
            to text mode in the constructor of ReaderData object. </exception>
        </member>
        <member name="P:Symbol.Barcode.ReaderData.Source">
            <summary>
            Returns the source of the scanned data. (ie The barcode scanner device name)
            </summary>
            <value> 
            A string that contains the name of the scanner which provided the source.
            </value>
        </member>
        <member name="P:Symbol.Barcode.ReaderData.TimeStamp">
            <summary>
            The time at which the barcode was scanned.
            </summary>
            <value>
            A DateTime structure that contains the time information.
            </value>
        </member>
        <member name="P:Symbol.Barcode.ReaderData.Type">
            <summary>
            The Decoder type of the barcode.
            </summary>
            <value>
            A <see cref="T:Symbol.Barcode.DecoderTypes"/> member that specifies the type of barcode scanned.
            </value>
        </member>
        <member name="P:Symbol.Barcode.ReaderData.TypeHex">
            <summary>
            The Decoder Type of the barcode in hexadecimal format.
            </summary>
            <value>
            A string of the form "0x#", where # is the decoder type in hexadecimal.
            </value>
        </member>
        <member name="P:Symbol.Barcode.ReaderData.Length">
            <summary>
            The length of the barcode data.
            </summary>
            <value>
            An integer that specifies the length of the scanned data.
            </value>
        </member>
        <member name="P:Symbol.Barcode.ReaderData.Event">
            <summary>
            Not currently used, returns either "Scan Complete" or "".
            </summary>
        </member>
        <member name="P:Symbol.Barcode.ReaderData.HasReader">
            <summary>
            Specifies whether or not the ReaderData has been attached to a Reader object via 
            a Actions.Read method call.
            </summary>
            <remarks>
             Note: This property will return true after a read has completed.
            </remarks>
            <value>
            A boolean flag that when set to true indicates that the ReaderData has been attached
            to a Reader at some point.
            </value>
        </member>
        <member name="P:Symbol.Barcode.ReaderData.RequestId">
            <summary>
            The ID of the read submitted to the barcode scanner hardware.
            </summary>
            <value>
            An integer that represents the ID of the requested read.
            </value>
        </member>
        <member name="P:Symbol.Barcode.ReaderData.Result">
            <summary>
            The result of the read request.
            </summary>
            <remarks>
            This result is a managed code version of the actual result returned by the
            underlying scan driver stack. It can be used to determine whether or not the 
            read was successful or failed. 
            </remarks>
            <value>
            A <see cref="T:Symbol.Results"/> member that indicates whether or not the read was 
            successful.
            </value>
        </member>
        <member name="T:Symbol.Barcode.ReaderParams">
            <summary>
            The READER_PARAMS structure holds the parameters for the attached bar code reader. 
            Reader parameters are global to all reads on all open handles on the same scanner.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.ReaderParams.StructInfo">
            <summary>
            Sub-structure describing memory allocated and used by this structure.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.ReaderParams.ReaderType">
            <summary>
            Describes the bar code reader type these parameters apply to. Read only. 
            This value determines the values for ReaderSpecific
            </summary>
        </member>
        <member name="F:Symbol.Barcode.ReaderParams.ReaderSpecific">
            <summary>
            The ReaderSpecific holds parameters for one reader type. 
            The structure of ReaderSpecific depends on the value of ReaderType. 
            </summary>
        </member>
        <member name="M:Symbol.Barcode.ReaderParams.#ctor(System.IntPtr)">
            <summary>
            The Constructor for ReaderParams
            </summary>
        </member>
        <member name="T:Symbol.Barcode.STRUCT_INFO">
            <summary>
            Sub-structure describing memory allocated and used by this structure.
            </summary>
        </member>
        <member name="M:Symbol.Barcode.STRUCT_INFO.#ctor">
            <summary>
            The constructor should not normally be called
            </summary>
        </member>
        <member name="T:Symbol.Barcode.READER_SPECIFIC">
            <summary>
            The ReaderSpecific holds parameters for one reader type. 
            The structure of ReaderSpecific depends on the value of ReaderType. 
            </summary>
        </member>
        <member name="F:Symbol.Barcode.READER_SPECIFIC.LaserSpecific">
            <summary>
            The LASER_SPECIFIC class holds laser specific reader parameters.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.READER_SPECIFIC.ContactSpecific">
            <summary>
            The CONTACT_SPECIFIC class holds contact wand specific reader parameters.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.READER_SPECIFIC.ImagerSpecific">
            <summary>
            The IMAGER_SPECIFIC class holds imager specific reader parameters.
            </summary>
        </member>
        <member name="M:Symbol.Barcode.READER_SPECIFIC.#ctor">
            <summary>
            The constructor should not normally be called
            </summary>
        </member>
        <member name="T:Symbol.Barcode.LASER_SPECIFIC">
            <summary>
            The LASER_SPECIFIC class holds laser specific reader parameters.
            </summary>
        </member>
        <member name="M:Symbol.Barcode.LASER_SPECIFIC.#ctor">
            <summary>
            The constructor should not normally be called
            </summary>
        </member>
        <member name="F:Symbol.Barcode.LASER_SPECIFIC.AimType">
            <summary>
            Describes the type of aiming to use.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.LASER_SPECIFIC.AimDuration">
            <summary>
            Duration in milliseconds for timed aim modes.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.LASER_SPECIFIC.AimMode">
            <summary>
            Describes the mode of aiming to use.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.LASER_SPECIFIC.NarrowBeam">
            <summary>
            Flag to enable narrow beam width.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.LASER_SPECIFIC.RasterMode">
            <summary>
            Describes the type of vertical rastering to use.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.LASER_SPECIFIC.BeamTimer">
            <summary>
            Maximum laser on time in milliseconds. A value of 0 means infinite timeout.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.LASER_SPECIFIC.ControlScanLed">
            <summary>
            Flag to enable LED decode notification by the scanner device (disables notification in the mobile computer).
            </summary>
        </member>
        <member name="F:Symbol.Barcode.LASER_SPECIFIC.ScanLedLogicLevel">
            <summary>
            Logic level to use when controlling scanner LED.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.LASER_SPECIFIC.KlasseEinsEnable">
            <summary>
            Flag to enable Klasse Eins laser on time function.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.LASER_SPECIFIC.BidirRedundancy">
            <summary>
            Flag to enable birdirectional redundancy.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.LASER_SPECIFIC.LinearSecurityLevel">
            <summary>
            Describes the linear security level used during decoding.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.LASER_SPECIFIC.PointerTimer">
            <summary>
            Maximum laser on time in milliseconds for laser pointer. A value of 0 means infinite timeout.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.LASER_SPECIFIC.RasterHeight">
            <summary>
            Describes, as a percentage, the vertical rastering height to use when the dwRasterMode is RASTER_MODE_OPEN_ALWAYS.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.CONTACT_SPECIFIC">
            <summary>
            The CONTACT_SPECIFIC class holds contact wand specific reader parameters.
            </summary>
        </member>
        <member name="M:Symbol.Barcode.CONTACT_SPECIFIC.#ctor">
            <summary>
            The constructor should not normally be called
            </summary>
        </member>
        <member name="F:Symbol.Barcode.CONTACT_SPECIFIC.QuietZoneRatio">
            <summary>
            Quiet zone ratio x:1 to 1:x used for decoding.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.CONTACT_SPECIFIC.InitialScanTime">
            <summary>
            Time in milliseconds that contact wand will remain in acquire mode waiting for a bar code.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.CONTACT_SPECIFIC.PulseDelay">
            <summary>
            Time in milliseconds to pause between pulses of the contact wand.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.IMAGER_SPECIFIC">
            <summary>
            The IMAGER_SPECIFIC class holds imager specific reader parameters.
            </summary>
        </member>
        <member name="M:Symbol.Barcode.IMAGER_SPECIFIC.#ctor">
            <summary>
            The constructor should not normally be called
            </summary>
        </member>
        <member name="F:Symbol.Barcode.IMAGER_SPECIFIC.AimType">
            <summary>
            Describes the type of aiming to use.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.IMAGER_SPECIFIC.AimDuration">
            <summary>
            Duration in milliseconds for timed aim modes.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.IMAGER_SPECIFIC.AimMode">
            <summary>
            Describes the mode of aiming to use.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.IMAGER_SPECIFIC.BeamTimer">
            <summary>
            Maximum Imager on time in milliseconds. A value of 0 means infinite timeout.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.IMAGER_SPECIFIC.PointerTimer">
            <summary>
            Maximum beam timer in milliseconds for pointer mode. A value of 0 means infinite timeout.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.IMAGER_SPECIFIC.ImageCaptureTimeout">
            <summary>
            Timeout for image capture (in milliseconds).
            </summary>
        </member>
        <member name="F:Symbol.Barcode.IMAGER_SPECIFIC.ImageCompressionTimeout">
            <summary>
            Timeout for image compression and processing (in milliseconds).
            </summary>
        </member>
        <member name="F:Symbol.Barcode.IMAGER_SPECIFIC.LinearSecurityLevel">
            <summary>
            Describes the linear security level used during decoding.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.IMAGER_SPECIFIC.FocusMode">
            <summary>
            Focus mode to use.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.IMAGER_SPECIFIC.FocusPosition">
            <summary>
            Focus position to use.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.IMAGER_SPECIFIC.PoorQuality1DMode">
            <summary>
            This parameter allows poor quality 1D barcodes to be read, 
            BUT adversely affecting the overall decoding performance.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.IMAGER_SPECIFIC.PicklistMode">
            <summary>
            This parameter allows the imager to decode only the barcode that is directly under the 
            cross-hair/reticule (+) part of the AIM pattern.  This feature is most useful in applications 
            where multiple barcodes may appear in the field of view during a decode session and only 
            one of them is targeted for decode.  When enabled, bPicklistMode will override dwAimMode if 
            no aiming is chosen and use the AIM_MODE_RETICLE mode.  When enabled, bPicklistMode may adversely 
            affect overall decoding performance.
            		ENABLE – Enables picklist mode, so only the barcode under the cross-hair can be decoded.
            		DISABLE – Disables picklist mode, so any barcode within the field of view can be decoded.
            </summary>
        </member>
        <member name="F:Symbol.Barcode.IMAGER_SPECIFIC.DPMMode">
            <summary>
            This parameter allows Direct Part Marking (DPM) bar codes to be read but may adversely affect 
            overall decoding performance. Direct Part Marking is a way of stamping bar codes directly on 
            physical objects. 
            Support for this feature is available on DPM terminals only. If this feature is not available 
            and user attempts to enable it, an error (E_SCN_NOTSUPPORTED) will result.
            </summary>
            <remarks>This feature cannot be turned on in conjunction with Picklist as both these 
            modes are mutually exclusive. An attempt to turn on both will result in an error 
            (E_SCN_NOTSUPPORTED).
            </remarks>
        </member>
        <member name="F:Symbol.Barcode.IMAGER_SPECIFIC.IlluminationMode">
            <summary>
            Illumination Mode to use.
            </summary>
        </member>
        <member name="T:Symbol.Barcode.Version">
            <summary>
            Barcode reader version class.
            </summary>
        </member>
        <member name="M:Symbol.Barcode.Version.#ctor(Symbol.Barcode.Reader)">
            <summary>
            Version class constructor
            </summary>
            <param name="r">The Reader object to obtain version information from.</param>
        </member>
        <member name="P:Symbol.Barcode.Version.Hardware">
            <summary>
            Version of scanner hardware if applicable
            </summary>
        </member>
        <member name="P:Symbol.Barcode.Version.Decoder">
            <summary>
            Version of decoder software if applicable
            </summary>
        </member>
        <member name="P:Symbol.Barcode.Version.PDD">
            <summary>
            Version of the scanner driver PDD.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.Version.MDD">
            <summary>
            Version of the scanner driver MDD.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.Version.CAPI">
            <summary>
            Version of the scanner native API.
            </summary>
        </member>
        <member name="P:Symbol.Barcode.Version.Assembly">
            <summary>
            Version of the Assembly.
            </summary>
        </member>
    </members>
</doc>
